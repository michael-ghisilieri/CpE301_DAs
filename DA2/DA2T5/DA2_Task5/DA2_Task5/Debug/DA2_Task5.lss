
DA2_Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016a  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000103  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013c  00000000  00000000  00000471  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a2  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
		delay();			// call delay function for 250ms delay (.25 seconds)
	}
	
}

void delay () {				// function body
  80:	89 e1       	ldi	r24, 0x19	; 25
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	ef e1       	ldi	r30, 0x1F	; 31
  86:	fe e4       	ldi	r31, 0x4E	; 78
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <delay+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <delay+0xe>
  8e:	00 00       	nop
  90:	01 97       	sbiw	r24, 0x01	; 1
	int i;					// declare i for counter
	for(i = 0; i < 25; i++) {	// loop 25 times
  92:	c1 f7       	brne	.-16     	; 0x84 <delay+0x4>
		_delay_ms(10);		//	delay 10 ms
	}						// total delay = 25*10ms = 250ms
  94:	08 95       	ret

00000096 <main>:

int main(void)
{
	int counter = 0;		// set counter for LED bargraph starting at 0
	int multiple = 0;		// set counter for 5th/10th rising edge starting at 0
	DDRB = 0xFF;			// set every pin on PORTB as an output
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	87 b9       	out	0x07, r24	; 7
	while(1) {				// loop forever
		delay();			// call delay function for 250ms delay (.25 seconds)
  9e:	0e 94 40 00 	call	0x80	; 0x80 <delay>
void delay ();				// function declaration for delay

int main(void)
{
	int counter = 0;		// set counter for LED bargraph starting at 0
	int multiple = 0;		// set counter for 5th/10th rising edge starting at 0
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	10 e0       	ldi	r17, 0x00	; 0
	DDRB = 0xFF;			// set every pin on PORTB as an output
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
	while(1) {				// loop forever
		delay();			// call delay function for 250ms delay (.25 seconds)
		counter++;			// increment counter after delay
  a6:	c1 e0       	ldi	r28, 0x01	; 1
  a8:	d0 e0       	ldi	r29, 0x00	; 0
		switch(multiple) {  
			case 5:			// if first 5th rising edge
				PORTC = 0x20;	// PC4 = 0 and PC5 = 1
				break;
			case 10:		// if first 10th rising edge
				PORTC = 0x10;	// PC4 = 1 and PC5 = 0
  aa:	68 94       	set
  ac:	bb 24       	eor	r11, r11
  ae:	b4 f8       	bld	r11, 4
				break;
			case 15:		// if second 5th rising edge
				PORTC = 0x30;	// PC4 = 1 and PC5 = 1
  b0:	0f 2e       	mov	r0, r31
  b2:	f0 e3       	ldi	r31, 0x30	; 48
  b4:	cf 2e       	mov	r12, r31
  b6:	f0 2d       	mov	r31, r0
				break;
			case 20:		// if second 10th rising edge
				PORTC = 0x00;	// PC4 = 0 and PC5 = 0
				multiple = 0;	// clear check counter
  b8:	e1 2c       	mov	r14, r1
  ba:	f1 2c       	mov	r15, r1
			counter = 0;	// reset counter back to zero
		PORTB = counter;	// output counter to LED bargraph
		multiple++;			// increment counter for 5th/10th checks
		switch(multiple) {  
			case 5:			// if first 5th rising edge
				PORTC = 0x20;	// PC4 = 0 and PC5 = 1
  bc:	68 94       	set
  be:	dd 24       	eor	r13, r13
  c0:	d5 f8       	bld	r13, 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x32>
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
	while(1) {				// loop forever
		delay();			// call delay function for 250ms delay (.25 seconds)
		counter++;			// increment counter after delay
		if(counter > 255)	// if counter went above 255 (9th bit)
			counter = 0;	// reset counter back to zero
  c4:	ce 2d       	mov	r28, r14
  c6:	df 2d       	mov	r29, r15
		PORTB = counter;	// output counter to LED bargraph
  c8:	c5 b9       	out	0x05, r28	; 5
		multiple++;			// increment counter for 5th/10th checks
  ca:	0f 5f       	subi	r16, 0xFF	; 255
  cc:	1f 4f       	sbci	r17, 0xFF	; 255
		switch(multiple) {  
  ce:	0a 30       	cpi	r16, 0x0A	; 10
  d0:	11 05       	cpc	r17, r1
  d2:	71 f0       	breq	.+28     	; 0xf0 <main+0x5a>
  d4:	24 f4       	brge	.+8      	; 0xde <main+0x48>
  d6:	05 30       	cpi	r16, 0x05	; 5
  d8:	11 05       	cpc	r17, r1
  da:	41 f0       	breq	.+16     	; 0xec <main+0x56>
  dc:	10 c0       	rjmp	.+32     	; 0xfe <main+0x68>
  de:	0f 30       	cpi	r16, 0x0F	; 15
  e0:	11 05       	cpc	r17, r1
  e2:	41 f0       	breq	.+16     	; 0xf4 <main+0x5e>
  e4:	04 31       	cpi	r16, 0x14	; 20
  e6:	11 05       	cpc	r17, r1
  e8:	39 f0       	breq	.+14     	; 0xf8 <main+0x62>
  ea:	09 c0       	rjmp	.+18     	; 0xfe <main+0x68>
			case 5:			// if first 5th rising edge
				PORTC = 0x20;	// PC4 = 0 and PC5 = 1
  ec:	d8 b8       	out	0x08, r13	; 8
				break;
  ee:	07 c0       	rjmp	.+14     	; 0xfe <main+0x68>
			case 10:		// if first 10th rising edge
				PORTC = 0x10;	// PC4 = 1 and PC5 = 0
  f0:	b8 b8       	out	0x08, r11	; 8
				break;
  f2:	05 c0       	rjmp	.+10     	; 0xfe <main+0x68>
			case 15:		// if second 5th rising edge
				PORTC = 0x30;	// PC4 = 1 and PC5 = 1
  f4:	c8 b8       	out	0x08, r12	; 8
				break;
  f6:	03 c0       	rjmp	.+6      	; 0xfe <main+0x68>
			case 20:		// if second 10th rising edge
				PORTC = 0x00;	// PC4 = 0 and PC5 = 0
  f8:	18 b8       	out	0x08, r1	; 8
				multiple = 0;	// clear check counter
  fa:	0e 2d       	mov	r16, r14
  fc:	1f 2d       	mov	r17, r15
				break;
			default:
				break;
		}
		delay();			// call delay function for 250ms delay (.25 seconds)
  fe:	0e 94 40 00 	call	0x80	; 0x80 <delay>
	int counter = 0;		// set counter for LED bargraph starting at 0
	int multiple = 0;		// set counter for 5th/10th rising edge starting at 0
	DDRB = 0xFF;			// set every pin on PORTB as an output
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
	while(1) {				// loop forever
		delay();			// call delay function for 250ms delay (.25 seconds)
 102:	0e 94 40 00 	call	0x80	; 0x80 <delay>
		counter++;			// increment counter after delay
 106:	21 96       	adiw	r28, 0x01	; 1
		if(counter > 255)	// if counter went above 255 (9th bit)
 108:	cf 3f       	cpi	r28, 0xFF	; 255
 10a:	d1 05       	cpc	r29, r1
 10c:	09 f0       	breq	.+2      	; 0x110 <main+0x7a>
 10e:	d4 f6       	brge	.-76     	; 0xc4 <main+0x2e>
 110:	db cf       	rjmp	.-74     	; 0xc8 <main+0x32>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
