
DA5_Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016d  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000103  00000000  00000000  000006c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000135  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bc  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
		OCR1A = angle; // set OCR1A to calculated value based on pot.
		delay(); // delay for 1 second
	}
}

void delay () {
  80:	84 e6       	ldi	r24, 0x64	; 100
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	ef e1       	ldi	r30, 0x1F	; 31
  86:	fe e4       	ldi	r31, 0x4E	; 78
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <delay+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <delay+0xe>
  8e:	00 00       	nop
  90:	01 97       	sbiw	r24, 0x01	; 1
	int i;					// declare i for counter
	for(i = 0; i < 100; i++) {	// loop 100 times
  92:	c1 f7       	brne	.-16     	; 0x84 <delay+0x4>
		_delay_ms(10);		//	delay 10 ms
	}						// total delay = 100*10ms = 1000ms
}
  94:	08 95       	ret

00000096 <main>:
int main()
{
	unsigned short potValue; // will hold value of pot. from ADC
	unsigned short angle = 0; // angle of servo motor
	
	ADMUX |= (1 << REFS0); // AVcc with ext. cap. at AREF pin
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	// ADCSRA will set prescaler to 8 and enable ADC
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	83 68       	ori	r24, 0x83	; 131
  a8:	80 83       	st	Z, r24
	
	DDRB = 0x02; // PB1/OC1A as output to PWM of servo
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	84 b9       	out	0x04, r24	; 4
	//ICR1 = 20000 defines 50Hz PWM
	ICR1 = 20000; // value that timer will catch on interrupt
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	9e e4       	ldi	r25, 0x4E	; 78
  b2:	90 93 87 00 	sts	0x0087, r25
  b6:	80 93 86 00 	sts	0x0086, r24
	// TCCR1A will toggle on compare match, Fast PWM with ICR1 as top value
	TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(0<<COM1B1)|(1<<WGM11)|(0<<WGM10);
  ba:	e0 e8       	ldi	r30, 0x80	; 128
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 68       	ori	r24, 0x82	; 130
  c2:	80 83       	st	Z, r24
	// prescaler of 8
	TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8a 61       	ori	r24, 0x1A	; 26
  cc:	80 83       	st	Z, r24
	// 1/1023 where 1023 is the max value of the 10-bit ADC
	// so the equation will be (1 - (value from pot. * 1/1023))
	// to match the way at which this specific servo rotates
	while(1)
	{
		ADCSRA |= (1 << ADSC); // start ADC conversion
  ce:	ca e7       	ldi	r28, 0x7A	; 122
  d0:	d0 e0       	ldi	r29, 0x00	; 0
		loop_until_bit_is_clear(ADCSRA, ADSC); // wait until ADC is done
		potValue = ADC; // store ADC value into potValue
  d2:	0f 2e       	mov	r0, r31
  d4:	f8 e7       	ldi	r31, 0x78	; 120
  d6:	ef 2e       	mov	r14, r31
  d8:	f1 2c       	mov	r15, r1
  da:	f0 2d       	mov	r31, r0
		// Since the range from 0 degrees to 180 degrees is the
		// max value minus the minimum, it will be 2300 - 500 = 1800
		// multiple the range by the potentiometer ratio
		angle = 1800*(1 - (potValue*(.000975)));
		angle += 500; // add 500 since 0 degrees is at 500
		OCR1A = angle; // set OCR1A to calculated value based on pot.
  dc:	08 e8       	ldi	r16, 0x88	; 136
  de:	10 e0       	ldi	r17, 0x00	; 0
	// 1/1023 where 1023 is the max value of the 10-bit ADC
	// so the equation will be (1 - (value from pot. * 1/1023))
	// to match the way at which this specific servo rotates
	while(1)
	{
		ADCSRA |= (1 << ADSC); // start ADC conversion
  e0:	88 81       	ld	r24, Y
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	88 83       	st	Y, r24
		loop_until_bit_is_clear(ADCSRA, ADSC); // wait until ADC is done
  e6:	88 81       	ld	r24, Y
  e8:	86 fd       	sbrc	r24, 6
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x50>
		potValue = ADC; // store ADC value into potValue
  ec:	f7 01       	movw	r30, r14
  ee:	60 81       	ld	r22, Z
  f0:	71 81       	ldd	r23, Z+1	; 0x01
		
		// Since the range from 0 degrees to 180 degrees is the
		// max value minus the minimum, it will be 2300 - 500 = 1800
		// multiple the range by the potentiometer ratio
		angle = 1800*(1 - (potValue*(.000975)));
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 37 01 	call	0x26e	; 0x26e <__floatunsisf>
  fa:	24 e2       	ldi	r18, 0x24	; 36
  fc:	37 e9       	ldi	r19, 0x97	; 151
  fe:	4f e7       	ldi	r20, 0x7F	; 127
 100:	5a e3       	ldi	r21, 0x3A	; 58
 102:	0e 94 c5 01 	call	0x38a	; 0x38a <__mulsf3>
 106:	9b 01       	movw	r18, r22
 108:	ac 01       	movw	r20, r24
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	9f e3       	ldi	r25, 0x3F	; 63
 112:	0e 94 9b 00 	call	0x136	; 0x136 <__subsf3>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	41 ee       	ldi	r20, 0xE1	; 225
 11c:	54 e4       	ldi	r21, 0x44	; 68
 11e:	0e 94 c5 01 	call	0x38a	; 0x38a <__mulsf3>
 122:	0e 94 08 01 	call	0x210	; 0x210 <__fixunssfsi>
		angle += 500; // add 500 since 0 degrees is at 500
 126:	6c 50       	subi	r22, 0x0C	; 12
 128:	7e 4f       	sbci	r23, 0xFE	; 254
		OCR1A = angle; // set OCR1A to calculated value based on pot.
 12a:	f8 01       	movw	r30, r16
 12c:	71 83       	std	Z+1, r23	; 0x01
 12e:	60 83       	st	Z, r22
		delay(); // delay for 1 second
 130:	0e 94 40 00 	call	0x80	; 0x80 <delay>
	}
 134:	d5 cf       	rjmp	.-86     	; 0xe0 <main+0x4a>

00000136 <__subsf3>:
 136:	50 58       	subi	r21, 0x80	; 128

00000138 <__addsf3>:
 138:	bb 27       	eor	r27, r27
 13a:	aa 27       	eor	r26, r26
 13c:	0e 94 b3 00 	call	0x166	; 0x166 <__addsf3x>
 140:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_round>
 144:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fp_pscA>
 148:	38 f0       	brcs	.+14     	; 0x158 <__addsf3+0x20>
 14a:	0e 94 84 01 	call	0x308	; 0x308 <__fp_pscB>
 14e:	20 f0       	brcs	.+8      	; 0x158 <__addsf3+0x20>
 150:	39 f4       	brne	.+14     	; 0x160 <__addsf3+0x28>
 152:	9f 3f       	cpi	r25, 0xFF	; 255
 154:	19 f4       	brne	.+6      	; 0x15c <__addsf3+0x24>
 156:	26 f4       	brtc	.+8      	; 0x160 <__addsf3+0x28>
 158:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__fp_nan>
 15c:	0e f4       	brtc	.+2      	; 0x160 <__addsf3+0x28>
 15e:	e0 95       	com	r30
 160:	e7 fb       	bst	r30, 7
 162:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__fp_inf>

00000166 <__addsf3x>:
 166:	e9 2f       	mov	r30, r25
 168:	0e 94 9c 01 	call	0x338	; 0x338 <__fp_split3>
 16c:	58 f3       	brcs	.-42     	; 0x144 <__addsf3+0xc>
 16e:	ba 17       	cp	r27, r26
 170:	62 07       	cpc	r22, r18
 172:	73 07       	cpc	r23, r19
 174:	84 07       	cpc	r24, r20
 176:	95 07       	cpc	r25, r21
 178:	20 f0       	brcs	.+8      	; 0x182 <__addsf3x+0x1c>
 17a:	79 f4       	brne	.+30     	; 0x19a <__addsf3x+0x34>
 17c:	a6 f5       	brtc	.+104    	; 0x1e6 <__addsf3x+0x80>
 17e:	0c 94 be 01 	jmp	0x37c	; 0x37c <__fp_zero>
 182:	0e f4       	brtc	.+2      	; 0x186 <__addsf3x+0x20>
 184:	e0 95       	com	r30
 186:	0b 2e       	mov	r0, r27
 188:	ba 2f       	mov	r27, r26
 18a:	a0 2d       	mov	r26, r0
 18c:	0b 01       	movw	r0, r22
 18e:	b9 01       	movw	r22, r18
 190:	90 01       	movw	r18, r0
 192:	0c 01       	movw	r0, r24
 194:	ca 01       	movw	r24, r20
 196:	a0 01       	movw	r20, r0
 198:	11 24       	eor	r1, r1
 19a:	ff 27       	eor	r31, r31
 19c:	59 1b       	sub	r21, r25
 19e:	99 f0       	breq	.+38     	; 0x1c6 <__addsf3x+0x60>
 1a0:	59 3f       	cpi	r21, 0xF9	; 249
 1a2:	50 f4       	brcc	.+20     	; 0x1b8 <__addsf3x+0x52>
 1a4:	50 3e       	cpi	r21, 0xE0	; 224
 1a6:	68 f1       	brcs	.+90     	; 0x202 <__addsf3x+0x9c>
 1a8:	1a 16       	cp	r1, r26
 1aa:	f0 40       	sbci	r31, 0x00	; 0
 1ac:	a2 2f       	mov	r26, r18
 1ae:	23 2f       	mov	r18, r19
 1b0:	34 2f       	mov	r19, r20
 1b2:	44 27       	eor	r20, r20
 1b4:	58 5f       	subi	r21, 0xF8	; 248
 1b6:	f3 cf       	rjmp	.-26     	; 0x19e <__addsf3x+0x38>
 1b8:	46 95       	lsr	r20
 1ba:	37 95       	ror	r19
 1bc:	27 95       	ror	r18
 1be:	a7 95       	ror	r26
 1c0:	f0 40       	sbci	r31, 0x00	; 0
 1c2:	53 95       	inc	r21
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <__addsf3x+0x52>
 1c6:	7e f4       	brtc	.+30     	; 0x1e6 <__addsf3x+0x80>
 1c8:	1f 16       	cp	r1, r31
 1ca:	ba 0b       	sbc	r27, r26
 1cc:	62 0b       	sbc	r22, r18
 1ce:	73 0b       	sbc	r23, r19
 1d0:	84 0b       	sbc	r24, r20
 1d2:	ba f0       	brmi	.+46     	; 0x202 <__addsf3x+0x9c>
 1d4:	91 50       	subi	r25, 0x01	; 1
 1d6:	a1 f0       	breq	.+40     	; 0x200 <__addsf3x+0x9a>
 1d8:	ff 0f       	add	r31, r31
 1da:	bb 1f       	adc	r27, r27
 1dc:	66 1f       	adc	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	88 1f       	adc	r24, r24
 1e2:	c2 f7       	brpl	.-16     	; 0x1d4 <__addsf3x+0x6e>
 1e4:	0e c0       	rjmp	.+28     	; 0x202 <__addsf3x+0x9c>
 1e6:	ba 0f       	add	r27, r26
 1e8:	62 1f       	adc	r22, r18
 1ea:	73 1f       	adc	r23, r19
 1ec:	84 1f       	adc	r24, r20
 1ee:	48 f4       	brcc	.+18     	; 0x202 <__addsf3x+0x9c>
 1f0:	87 95       	ror	r24
 1f2:	77 95       	ror	r23
 1f4:	67 95       	ror	r22
 1f6:	b7 95       	ror	r27
 1f8:	f7 95       	ror	r31
 1fa:	9e 3f       	cpi	r25, 0xFE	; 254
 1fc:	08 f0       	brcs	.+2      	; 0x200 <__addsf3x+0x9a>
 1fe:	b0 cf       	rjmp	.-160    	; 0x160 <__addsf3+0x28>
 200:	93 95       	inc	r25
 202:	88 0f       	add	r24, r24
 204:	08 f0       	brcs	.+2      	; 0x208 <__addsf3x+0xa2>
 206:	99 27       	eor	r25, r25
 208:	ee 0f       	add	r30, r30
 20a:	97 95       	ror	r25
 20c:	87 95       	ror	r24
 20e:	08 95       	ret

00000210 <__fixunssfsi>:
 210:	0e 94 a4 01 	call	0x348	; 0x348 <__fp_splitA>
 214:	88 f0       	brcs	.+34     	; 0x238 <__fixunssfsi+0x28>
 216:	9f 57       	subi	r25, 0x7F	; 127
 218:	98 f0       	brcs	.+38     	; 0x240 <__fixunssfsi+0x30>
 21a:	b9 2f       	mov	r27, r25
 21c:	99 27       	eor	r25, r25
 21e:	b7 51       	subi	r27, 0x17	; 23
 220:	b0 f0       	brcs	.+44     	; 0x24e <__fixunssfsi+0x3e>
 222:	e1 f0       	breq	.+56     	; 0x25c <__fixunssfsi+0x4c>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	1a f0       	brmi	.+6      	; 0x234 <__fixunssfsi+0x24>
 22e:	ba 95       	dec	r27
 230:	c9 f7       	brne	.-14     	; 0x224 <__fixunssfsi+0x14>
 232:	14 c0       	rjmp	.+40     	; 0x25c <__fixunssfsi+0x4c>
 234:	b1 30       	cpi	r27, 0x01	; 1
 236:	91 f0       	breq	.+36     	; 0x25c <__fixunssfsi+0x4c>
 238:	0e 94 be 01 	call	0x37c	; 0x37c <__fp_zero>
 23c:	b1 e0       	ldi	r27, 0x01	; 1
 23e:	08 95       	ret
 240:	0c 94 be 01 	jmp	0x37c	; 0x37c <__fp_zero>
 244:	67 2f       	mov	r22, r23
 246:	78 2f       	mov	r23, r24
 248:	88 27       	eor	r24, r24
 24a:	b8 5f       	subi	r27, 0xF8	; 248
 24c:	39 f0       	breq	.+14     	; 0x25c <__fixunssfsi+0x4c>
 24e:	b9 3f       	cpi	r27, 0xF9	; 249
 250:	cc f3       	brlt	.-14     	; 0x244 <__fixunssfsi+0x34>
 252:	86 95       	lsr	r24
 254:	77 95       	ror	r23
 256:	67 95       	ror	r22
 258:	b3 95       	inc	r27
 25a:	d9 f7       	brne	.-10     	; 0x252 <__fixunssfsi+0x42>
 25c:	3e f4       	brtc	.+14     	; 0x26c <__fixunssfsi+0x5c>
 25e:	90 95       	com	r25
 260:	80 95       	com	r24
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f 4f       	sbci	r24, 0xFF	; 255
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	08 95       	ret

0000026e <__floatunsisf>:
 26e:	e8 94       	clt
 270:	09 c0       	rjmp	.+18     	; 0x284 <__floatsisf+0x12>

00000272 <__floatsisf>:
 272:	97 fb       	bst	r25, 7
 274:	3e f4       	brtc	.+14     	; 0x284 <__floatsisf+0x12>
 276:	90 95       	com	r25
 278:	80 95       	com	r24
 27a:	70 95       	com	r23
 27c:	61 95       	neg	r22
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	8f 4f       	sbci	r24, 0xFF	; 255
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	99 23       	and	r25, r25
 286:	a9 f0       	breq	.+42     	; 0x2b2 <__floatsisf+0x40>
 288:	f9 2f       	mov	r31, r25
 28a:	96 e9       	ldi	r25, 0x96	; 150
 28c:	bb 27       	eor	r27, r27
 28e:	93 95       	inc	r25
 290:	f6 95       	lsr	r31
 292:	87 95       	ror	r24
 294:	77 95       	ror	r23
 296:	67 95       	ror	r22
 298:	b7 95       	ror	r27
 29a:	f1 11       	cpse	r31, r1
 29c:	f8 cf       	rjmp	.-16     	; 0x28e <__floatsisf+0x1c>
 29e:	fa f4       	brpl	.+62     	; 0x2de <__floatsisf+0x6c>
 2a0:	bb 0f       	add	r27, r27
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <__floatsisf+0x36>
 2a4:	60 ff       	sbrs	r22, 0
 2a6:	1b c0       	rjmp	.+54     	; 0x2de <__floatsisf+0x6c>
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	8f 4f       	sbci	r24, 0xFF	; 255
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	16 c0       	rjmp	.+44     	; 0x2de <__floatsisf+0x6c>
 2b2:	88 23       	and	r24, r24
 2b4:	11 f0       	breq	.+4      	; 0x2ba <__floatsisf+0x48>
 2b6:	96 e9       	ldi	r25, 0x96	; 150
 2b8:	11 c0       	rjmp	.+34     	; 0x2dc <__floatsisf+0x6a>
 2ba:	77 23       	and	r23, r23
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <__floatsisf+0x54>
 2be:	9e e8       	ldi	r25, 0x8E	; 142
 2c0:	87 2f       	mov	r24, r23
 2c2:	76 2f       	mov	r23, r22
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__floatsisf+0x5e>
 2c6:	66 23       	and	r22, r22
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <__floatsisf+0x74>
 2ca:	96 e8       	ldi	r25, 0x86	; 134
 2cc:	86 2f       	mov	r24, r22
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	2a f0       	brmi	.+10     	; 0x2de <__floatsisf+0x6c>
 2d4:	9a 95       	dec	r25
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	88 1f       	adc	r24, r24
 2dc:	da f7       	brpl	.-10     	; 0x2d4 <__floatsisf+0x62>
 2de:	88 0f       	add	r24, r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	97 f9       	bld	r25, 7
 2e6:	08 95       	ret

000002e8 <__fp_inf>:
 2e8:	97 f9       	bld	r25, 7
 2ea:	9f 67       	ori	r25, 0x7F	; 127
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <__fp_nan>:
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	08 95       	ret

000002fa <__fp_pscA>:
 2fa:	00 24       	eor	r0, r0
 2fc:	0a 94       	dec	r0
 2fe:	16 16       	cp	r1, r22
 300:	17 06       	cpc	r1, r23
 302:	18 06       	cpc	r1, r24
 304:	09 06       	cpc	r0, r25
 306:	08 95       	ret

00000308 <__fp_pscB>:
 308:	00 24       	eor	r0, r0
 30a:	0a 94       	dec	r0
 30c:	12 16       	cp	r1, r18
 30e:	13 06       	cpc	r1, r19
 310:	14 06       	cpc	r1, r20
 312:	05 06       	cpc	r0, r21
 314:	08 95       	ret

00000316 <__fp_round>:
 316:	09 2e       	mov	r0, r25
 318:	03 94       	inc	r0
 31a:	00 0c       	add	r0, r0
 31c:	11 f4       	brne	.+4      	; 0x322 <__fp_round+0xc>
 31e:	88 23       	and	r24, r24
 320:	52 f0       	brmi	.+20     	; 0x336 <__fp_round+0x20>
 322:	bb 0f       	add	r27, r27
 324:	40 f4       	brcc	.+16     	; 0x336 <__fp_round+0x20>
 326:	bf 2b       	or	r27, r31
 328:	11 f4       	brne	.+4      	; 0x32e <__fp_round+0x18>
 32a:	60 ff       	sbrs	r22, 0
 32c:	04 c0       	rjmp	.+8      	; 0x336 <__fp_round+0x20>
 32e:	6f 5f       	subi	r22, 0xFF	; 255
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	8f 4f       	sbci	r24, 0xFF	; 255
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	08 95       	ret

00000338 <__fp_split3>:
 338:	57 fd       	sbrc	r21, 7
 33a:	90 58       	subi	r25, 0x80	; 128
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	59 f0       	breq	.+22     	; 0x358 <__fp_splitA+0x10>
 342:	5f 3f       	cpi	r21, 0xFF	; 255
 344:	71 f0       	breq	.+28     	; 0x362 <__fp_splitA+0x1a>
 346:	47 95       	ror	r20

00000348 <__fp_splitA>:
 348:	88 0f       	add	r24, r24
 34a:	97 fb       	bst	r25, 7
 34c:	99 1f       	adc	r25, r25
 34e:	61 f0       	breq	.+24     	; 0x368 <__fp_splitA+0x20>
 350:	9f 3f       	cpi	r25, 0xFF	; 255
 352:	79 f0       	breq	.+30     	; 0x372 <__fp_splitA+0x2a>
 354:	87 95       	ror	r24
 356:	08 95       	ret
 358:	12 16       	cp	r1, r18
 35a:	13 06       	cpc	r1, r19
 35c:	14 06       	cpc	r1, r20
 35e:	55 1f       	adc	r21, r21
 360:	f2 cf       	rjmp	.-28     	; 0x346 <__fp_split3+0xe>
 362:	46 95       	lsr	r20
 364:	f1 df       	rcall	.-30     	; 0x348 <__fp_splitA>
 366:	08 c0       	rjmp	.+16     	; 0x378 <__fp_splitA+0x30>
 368:	16 16       	cp	r1, r22
 36a:	17 06       	cpc	r1, r23
 36c:	18 06       	cpc	r1, r24
 36e:	99 1f       	adc	r25, r25
 370:	f1 cf       	rjmp	.-30     	; 0x354 <__fp_splitA+0xc>
 372:	86 95       	lsr	r24
 374:	71 05       	cpc	r23, r1
 376:	61 05       	cpc	r22, r1
 378:	08 94       	sec
 37a:	08 95       	ret

0000037c <__fp_zero>:
 37c:	e8 94       	clt

0000037e <__fp_szero>:
 37e:	bb 27       	eor	r27, r27
 380:	66 27       	eor	r22, r22
 382:	77 27       	eor	r23, r23
 384:	cb 01       	movw	r24, r22
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret

0000038a <__mulsf3>:
 38a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__mulsf3x>
 38e:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_round>
 392:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fp_pscA>
 396:	38 f0       	brcs	.+14     	; 0x3a6 <__mulsf3+0x1c>
 398:	0e 94 84 01 	call	0x308	; 0x308 <__fp_pscB>
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__mulsf3+0x1c>
 39e:	95 23       	and	r25, r21
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <__mulsf3+0x1c>
 3a2:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__fp_inf>
 3a6:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__fp_nan>
 3aa:	11 24       	eor	r1, r1
 3ac:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_szero>

000003b0 <__mulsf3x>:
 3b0:	0e 94 9c 01 	call	0x338	; 0x338 <__fp_split3>
 3b4:	70 f3       	brcs	.-36     	; 0x392 <__mulsf3+0x8>

000003b6 <__mulsf3_pse>:
 3b6:	95 9f       	mul	r25, r21
 3b8:	c1 f3       	breq	.-16     	; 0x3aa <__mulsf3+0x20>
 3ba:	95 0f       	add	r25, r21
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	55 1f       	adc	r21, r21
 3c0:	62 9f       	mul	r22, r18
 3c2:	f0 01       	movw	r30, r0
 3c4:	72 9f       	mul	r23, r18
 3c6:	bb 27       	eor	r27, r27
 3c8:	f0 0d       	add	r31, r0
 3ca:	b1 1d       	adc	r27, r1
 3cc:	63 9f       	mul	r22, r19
 3ce:	aa 27       	eor	r26, r26
 3d0:	f0 0d       	add	r31, r0
 3d2:	b1 1d       	adc	r27, r1
 3d4:	aa 1f       	adc	r26, r26
 3d6:	64 9f       	mul	r22, r20
 3d8:	66 27       	eor	r22, r22
 3da:	b0 0d       	add	r27, r0
 3dc:	a1 1d       	adc	r26, r1
 3de:	66 1f       	adc	r22, r22
 3e0:	82 9f       	mul	r24, r18
 3e2:	22 27       	eor	r18, r18
 3e4:	b0 0d       	add	r27, r0
 3e6:	a1 1d       	adc	r26, r1
 3e8:	62 1f       	adc	r22, r18
 3ea:	73 9f       	mul	r23, r19
 3ec:	b0 0d       	add	r27, r0
 3ee:	a1 1d       	adc	r26, r1
 3f0:	62 1f       	adc	r22, r18
 3f2:	83 9f       	mul	r24, r19
 3f4:	a0 0d       	add	r26, r0
 3f6:	61 1d       	adc	r22, r1
 3f8:	22 1f       	adc	r18, r18
 3fa:	74 9f       	mul	r23, r20
 3fc:	33 27       	eor	r19, r19
 3fe:	a0 0d       	add	r26, r0
 400:	61 1d       	adc	r22, r1
 402:	23 1f       	adc	r18, r19
 404:	84 9f       	mul	r24, r20
 406:	60 0d       	add	r22, r0
 408:	21 1d       	adc	r18, r1
 40a:	82 2f       	mov	r24, r18
 40c:	76 2f       	mov	r23, r22
 40e:	6a 2f       	mov	r22, r26
 410:	11 24       	eor	r1, r1
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	50 40       	sbci	r21, 0x00	; 0
 416:	9a f0       	brmi	.+38     	; 0x43e <__mulsf3_pse+0x88>
 418:	f1 f0       	breq	.+60     	; 0x456 <__mulsf3_pse+0xa0>
 41a:	88 23       	and	r24, r24
 41c:	4a f0       	brmi	.+18     	; 0x430 <__mulsf3_pse+0x7a>
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	bb 1f       	adc	r27, r27
 424:	66 1f       	adc	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	91 50       	subi	r25, 0x01	; 1
 42c:	50 40       	sbci	r21, 0x00	; 0
 42e:	a9 f7       	brne	.-22     	; 0x41a <__mulsf3_pse+0x64>
 430:	9e 3f       	cpi	r25, 0xFE	; 254
 432:	51 05       	cpc	r21, r1
 434:	80 f0       	brcs	.+32     	; 0x456 <__mulsf3_pse+0xa0>
 436:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__fp_inf>
 43a:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_szero>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	e4 f3       	brlt	.-8      	; 0x43a <__mulsf3_pse+0x84>
 442:	98 3e       	cpi	r25, 0xE8	; 232
 444:	d4 f3       	brlt	.-12     	; 0x43a <__mulsf3_pse+0x84>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f7 95       	ror	r31
 450:	e7 95       	ror	r30
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	c1 f7       	brne	.-16     	; 0x446 <__mulsf3_pse+0x90>
 456:	fe 2b       	or	r31, r30
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
