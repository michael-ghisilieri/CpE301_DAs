
DA5_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001be  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013c  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000140  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c3  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
}

void delay(unsigned short count) // count will be delay time in ms
{
	int i; // variable for for-loop iterations
	for(i = 0; i < count; i++)
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	69 f0       	breq	.+26     	; 0x9e <delay+0x1e>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	ef ec       	ldi	r30, 0xCF	; 207
  8a:	f7 e0       	ldi	r31, 0x07	; 7
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <delay+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <delay+0x12>
  92:	00 00       	nop
  94:	2f 5f       	subi	r18, 0xFF	; 255
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	28 17       	cp	r18, r24
  9a:	39 07       	cpc	r19, r25
  9c:	a9 f7       	brne	.-22     	; 0x88 <delay+0x8>
  9e:	08 95       	ret

000000a0 <main>:
int main()
{
	unsigned short potValue; // will hold value of pot. from ADC
	unsigned short period = 50; // total period of 50ms
	
	ADMUX |= (1 << REFS0); // AVcc with ext. cap. at AREF pin
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	// ADCSRA will set prescaler to 8 and enable ADC
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	83 68       	ori	r24, 0x83	; 131
  b2:	80 83       	st	Z, r24
	
	DDRB = 0xFF; // set all of PORTB as output
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 b9       	out	0x04, r24	; 4
	// so the equation will be (value from pot. * 1/1023) or
	// (1 - (value from pot. * 1/1023)
	while(1)
	{
		// black, red, yellow, blue
		ADCSRA |= (1 << ADSC); // start ADC conversion
  b8:	ca e7       	ldi	r28, 0x7A	; 122
  ba:	d0 e0       	ldi	r29, 0x00	; 0
		loop_until_bit_is_clear(ADCSRA, ADSC); // wait until ADC is done
		potValue = ADC; // store ADC value into potValue
  bc:	08 e7       	ldi	r16, 0x78	; 120
  be:	10 e0       	ldi	r17, 0x00	; 0
			// Since turning the potentiometer to a higher value, it should
			// cause the speed to increase which will mean a smaller delay
			// with the function delay(). This is why I delay with the
			// equation (1-ratio) since a higher value will delay for less
			// result in a faster speed.
			PORTB = 0x06;
  c0:	0f 2e       	mov	r0, r31
  c2:	f6 e0       	ldi	r31, 0x06	; 6
  c4:	cf 2e       	mov	r12, r31
  c6:	f0 2d       	mov	r31, r0
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
			PORTB = 0x0C;
  c8:	0f 2e       	mov	r0, r31
  ca:	fc e0       	ldi	r31, 0x0C	; 12
  cc:	df 2e       	mov	r13, r31
  ce:	f0 2d       	mov	r31, r0
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
			PORTB = 0x09;
  d0:	0f 2e       	mov	r0, r31
  d2:	f9 e0       	ldi	r31, 0x09	; 9
  d4:	ef 2e       	mov	r14, r31
  d6:	f0 2d       	mov	r31, r0
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
			PORTB = 0x03;
  d8:	0f 2e       	mov	r0, r31
  da:	f3 e0       	ldi	r31, 0x03	; 3
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
	// so the equation will be (value from pot. * 1/1023) or
	// (1 - (value from pot. * 1/1023)
	while(1)
	{
		// black, red, yellow, blue
		ADCSRA |= (1 << ADSC); // start ADC conversion
  e0:	88 81       	ld	r24, Y
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	88 83       	st	Y, r24
		loop_until_bit_is_clear(ADCSRA, ADSC); // wait until ADC is done
  e6:	88 81       	ld	r24, Y
  e8:	86 fd       	sbrc	r24, 6
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x46>
		potValue = ADC; // store ADC value into potValue
  ec:	f8 01       	movw	r30, r16
  ee:	60 81       	ld	r22, Z
  f0:	71 81       	ldd	r23, Z+1	; 0x01

		// green, red, black, blue
		if (potValue == 0) // if potentiometer is turned completely off
  f2:	61 15       	cp	r22, r1
  f4:	71 05       	cpc	r23, r1
  f6:	19 f4       	brne	.+6      	; 0xfe <main+0x5e>
			// stepper will not move and stay in place
			PORTB = PORTB;
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <main+0x40>
			// Since turning the potentiometer to a higher value, it should
			// cause the speed to increase which will mean a smaller delay
			// with the function delay(). This is why I delay with the
			// equation (1-ratio) since a higher value will delay for less
			// result in a faster speed.
			PORTB = 0x06;
  fe:	c5 b8       	out	0x05, r12	; 5
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 48 01 	call	0x290	; 0x290 <__floatunsisf>
 108:	24 e2       	ldi	r18, 0x24	; 36
 10a:	37 e9       	ldi	r19, 0x97	; 151
 10c:	4f e7       	ldi	r20, 0x7F	; 127
 10e:	5a e3       	ldi	r21, 0x3A	; 58
 110:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__mulsf3>
 114:	9b 01       	movw	r18, r22
 116:	ac 01       	movw	r20, r24
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	9f e3       	ldi	r25, 0x3F	; 63
 120:	0e 94 ac 00 	call	0x158	; 0x158 <__subsf3>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	48 e4       	ldi	r20, 0x48	; 72
 12a:	52 e4       	ldi	r21, 0x42	; 66
 12c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__mulsf3>
 130:	0e 94 19 01 	call	0x232	; 0x232 <__fixunssfsi>
 134:	4b 01       	movw	r8, r22
 136:	5c 01       	movw	r10, r24
 138:	cb 01       	movw	r24, r22
 13a:	0e 94 40 00 	call	0x80	; 0x80 <delay>
			PORTB = 0x0C;
 13e:	d5 b8       	out	0x05, r13	; 5
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
 140:	c4 01       	movw	r24, r8
 142:	0e 94 40 00 	call	0x80	; 0x80 <delay>
			PORTB = 0x09;
 146:	e5 b8       	out	0x05, r14	; 5
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
 148:	c4 01       	movw	r24, r8
 14a:	0e 94 40 00 	call	0x80	; 0x80 <delay>
			PORTB = 0x03;
 14e:	f5 b8       	out	0x05, r15	; 5
			delay((unsigned short)(period * (1- (potValue*(.000975)))));
 150:	c4 01       	movw	r24, r8
 152:	0e 94 40 00 	call	0x80	; 0x80 <delay>
 156:	c4 cf       	rjmp	.-120    	; 0xe0 <main+0x40>

00000158 <__subsf3>:
 158:	50 58       	subi	r21, 0x80	; 128

0000015a <__addsf3>:
 15a:	bb 27       	eor	r27, r27
 15c:	aa 27       	eor	r26, r26
 15e:	0e 94 c4 00 	call	0x188	; 0x188 <__addsf3x>
 162:	0c 94 9c 01 	jmp	0x338	; 0x338 <__fp_round>
 166:	0e 94 8e 01 	call	0x31c	; 0x31c <__fp_pscA>
 16a:	38 f0       	brcs	.+14     	; 0x17a <__addsf3+0x20>
 16c:	0e 94 95 01 	call	0x32a	; 0x32a <__fp_pscB>
 170:	20 f0       	brcs	.+8      	; 0x17a <__addsf3+0x20>
 172:	39 f4       	brne	.+14     	; 0x182 <__addsf3+0x28>
 174:	9f 3f       	cpi	r25, 0xFF	; 255
 176:	19 f4       	brne	.+6      	; 0x17e <__addsf3+0x24>
 178:	26 f4       	brtc	.+8      	; 0x182 <__addsf3+0x28>
 17a:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_nan>
 17e:	0e f4       	brtc	.+2      	; 0x182 <__addsf3+0x28>
 180:	e0 95       	com	r30
 182:	e7 fb       	bst	r30, 7
 184:	0c 94 85 01 	jmp	0x30a	; 0x30a <__fp_inf>

00000188 <__addsf3x>:
 188:	e9 2f       	mov	r30, r25
 18a:	0e 94 ad 01 	call	0x35a	; 0x35a <__fp_split3>
 18e:	58 f3       	brcs	.-42     	; 0x166 <__addsf3+0xc>
 190:	ba 17       	cp	r27, r26
 192:	62 07       	cpc	r22, r18
 194:	73 07       	cpc	r23, r19
 196:	84 07       	cpc	r24, r20
 198:	95 07       	cpc	r25, r21
 19a:	20 f0       	brcs	.+8      	; 0x1a4 <__addsf3x+0x1c>
 19c:	79 f4       	brne	.+30     	; 0x1bc <__addsf3x+0x34>
 19e:	a6 f5       	brtc	.+104    	; 0x208 <__addsf3x+0x80>
 1a0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_zero>
 1a4:	0e f4       	brtc	.+2      	; 0x1a8 <__addsf3x+0x20>
 1a6:	e0 95       	com	r30
 1a8:	0b 2e       	mov	r0, r27
 1aa:	ba 2f       	mov	r27, r26
 1ac:	a0 2d       	mov	r26, r0
 1ae:	0b 01       	movw	r0, r22
 1b0:	b9 01       	movw	r22, r18
 1b2:	90 01       	movw	r18, r0
 1b4:	0c 01       	movw	r0, r24
 1b6:	ca 01       	movw	r24, r20
 1b8:	a0 01       	movw	r20, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	ff 27       	eor	r31, r31
 1be:	59 1b       	sub	r21, r25
 1c0:	99 f0       	breq	.+38     	; 0x1e8 <__addsf3x+0x60>
 1c2:	59 3f       	cpi	r21, 0xF9	; 249
 1c4:	50 f4       	brcc	.+20     	; 0x1da <__addsf3x+0x52>
 1c6:	50 3e       	cpi	r21, 0xE0	; 224
 1c8:	68 f1       	brcs	.+90     	; 0x224 <__addsf3x+0x9c>
 1ca:	1a 16       	cp	r1, r26
 1cc:	f0 40       	sbci	r31, 0x00	; 0
 1ce:	a2 2f       	mov	r26, r18
 1d0:	23 2f       	mov	r18, r19
 1d2:	34 2f       	mov	r19, r20
 1d4:	44 27       	eor	r20, r20
 1d6:	58 5f       	subi	r21, 0xF8	; 248
 1d8:	f3 cf       	rjmp	.-26     	; 0x1c0 <__addsf3x+0x38>
 1da:	46 95       	lsr	r20
 1dc:	37 95       	ror	r19
 1de:	27 95       	ror	r18
 1e0:	a7 95       	ror	r26
 1e2:	f0 40       	sbci	r31, 0x00	; 0
 1e4:	53 95       	inc	r21
 1e6:	c9 f7       	brne	.-14     	; 0x1da <__addsf3x+0x52>
 1e8:	7e f4       	brtc	.+30     	; 0x208 <__addsf3x+0x80>
 1ea:	1f 16       	cp	r1, r31
 1ec:	ba 0b       	sbc	r27, r26
 1ee:	62 0b       	sbc	r22, r18
 1f0:	73 0b       	sbc	r23, r19
 1f2:	84 0b       	sbc	r24, r20
 1f4:	ba f0       	brmi	.+46     	; 0x224 <__addsf3x+0x9c>
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	a1 f0       	breq	.+40     	; 0x222 <__addsf3x+0x9a>
 1fa:	ff 0f       	add	r31, r31
 1fc:	bb 1f       	adc	r27, r27
 1fe:	66 1f       	adc	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	88 1f       	adc	r24, r24
 204:	c2 f7       	brpl	.-16     	; 0x1f6 <__addsf3x+0x6e>
 206:	0e c0       	rjmp	.+28     	; 0x224 <__addsf3x+0x9c>
 208:	ba 0f       	add	r27, r26
 20a:	62 1f       	adc	r22, r18
 20c:	73 1f       	adc	r23, r19
 20e:	84 1f       	adc	r24, r20
 210:	48 f4       	brcc	.+18     	; 0x224 <__addsf3x+0x9c>
 212:	87 95       	ror	r24
 214:	77 95       	ror	r23
 216:	67 95       	ror	r22
 218:	b7 95       	ror	r27
 21a:	f7 95       	ror	r31
 21c:	9e 3f       	cpi	r25, 0xFE	; 254
 21e:	08 f0       	brcs	.+2      	; 0x222 <__addsf3x+0x9a>
 220:	b0 cf       	rjmp	.-160    	; 0x182 <__addsf3+0x28>
 222:	93 95       	inc	r25
 224:	88 0f       	add	r24, r24
 226:	08 f0       	brcs	.+2      	; 0x22a <__addsf3x+0xa2>
 228:	99 27       	eor	r25, r25
 22a:	ee 0f       	add	r30, r30
 22c:	97 95       	ror	r25
 22e:	87 95       	ror	r24
 230:	08 95       	ret

00000232 <__fixunssfsi>:
 232:	0e 94 b5 01 	call	0x36a	; 0x36a <__fp_splitA>
 236:	88 f0       	brcs	.+34     	; 0x25a <__fixunssfsi+0x28>
 238:	9f 57       	subi	r25, 0x7F	; 127
 23a:	98 f0       	brcs	.+38     	; 0x262 <__fixunssfsi+0x30>
 23c:	b9 2f       	mov	r27, r25
 23e:	99 27       	eor	r25, r25
 240:	b7 51       	subi	r27, 0x17	; 23
 242:	b0 f0       	brcs	.+44     	; 0x270 <__fixunssfsi+0x3e>
 244:	e1 f0       	breq	.+56     	; 0x27e <__fixunssfsi+0x4c>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	1a f0       	brmi	.+6      	; 0x256 <__fixunssfsi+0x24>
 250:	ba 95       	dec	r27
 252:	c9 f7       	brne	.-14     	; 0x246 <__fixunssfsi+0x14>
 254:	14 c0       	rjmp	.+40     	; 0x27e <__fixunssfsi+0x4c>
 256:	b1 30       	cpi	r27, 0x01	; 1
 258:	91 f0       	breq	.+36     	; 0x27e <__fixunssfsi+0x4c>
 25a:	0e 94 cf 01 	call	0x39e	; 0x39e <__fp_zero>
 25e:	b1 e0       	ldi	r27, 0x01	; 1
 260:	08 95       	ret
 262:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_zero>
 266:	67 2f       	mov	r22, r23
 268:	78 2f       	mov	r23, r24
 26a:	88 27       	eor	r24, r24
 26c:	b8 5f       	subi	r27, 0xF8	; 248
 26e:	39 f0       	breq	.+14     	; 0x27e <__fixunssfsi+0x4c>
 270:	b9 3f       	cpi	r27, 0xF9	; 249
 272:	cc f3       	brlt	.-14     	; 0x266 <__fixunssfsi+0x34>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b3 95       	inc	r27
 27c:	d9 f7       	brne	.-10     	; 0x274 <__fixunssfsi+0x42>
 27e:	3e f4       	brtc	.+14     	; 0x28e <__fixunssfsi+0x5c>
 280:	90 95       	com	r25
 282:	80 95       	com	r24
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	8f 4f       	sbci	r24, 0xFF	; 255
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	08 95       	ret

00000290 <__floatunsisf>:
 290:	e8 94       	clt
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <__floatsisf+0x12>

00000294 <__floatsisf>:
 294:	97 fb       	bst	r25, 7
 296:	3e f4       	brtc	.+14     	; 0x2a6 <__floatsisf+0x12>
 298:	90 95       	com	r25
 29a:	80 95       	com	r24
 29c:	70 95       	com	r23
 29e:	61 95       	neg	r22
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	8f 4f       	sbci	r24, 0xFF	; 255
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	99 23       	and	r25, r25
 2a8:	a9 f0       	breq	.+42     	; 0x2d4 <__floatsisf+0x40>
 2aa:	f9 2f       	mov	r31, r25
 2ac:	96 e9       	ldi	r25, 0x96	; 150
 2ae:	bb 27       	eor	r27, r27
 2b0:	93 95       	inc	r25
 2b2:	f6 95       	lsr	r31
 2b4:	87 95       	ror	r24
 2b6:	77 95       	ror	r23
 2b8:	67 95       	ror	r22
 2ba:	b7 95       	ror	r27
 2bc:	f1 11       	cpse	r31, r1
 2be:	f8 cf       	rjmp	.-16     	; 0x2b0 <__floatsisf+0x1c>
 2c0:	fa f4       	brpl	.+62     	; 0x300 <__floatsisf+0x6c>
 2c2:	bb 0f       	add	r27, r27
 2c4:	11 f4       	brne	.+4      	; 0x2ca <__floatsisf+0x36>
 2c6:	60 ff       	sbrs	r22, 0
 2c8:	1b c0       	rjmp	.+54     	; 0x300 <__floatsisf+0x6c>
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	16 c0       	rjmp	.+44     	; 0x300 <__floatsisf+0x6c>
 2d4:	88 23       	and	r24, r24
 2d6:	11 f0       	breq	.+4      	; 0x2dc <__floatsisf+0x48>
 2d8:	96 e9       	ldi	r25, 0x96	; 150
 2da:	11 c0       	rjmp	.+34     	; 0x2fe <__floatsisf+0x6a>
 2dc:	77 23       	and	r23, r23
 2de:	21 f0       	breq	.+8      	; 0x2e8 <__floatsisf+0x54>
 2e0:	9e e8       	ldi	r25, 0x8E	; 142
 2e2:	87 2f       	mov	r24, r23
 2e4:	76 2f       	mov	r23, r22
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <__floatsisf+0x5e>
 2e8:	66 23       	and	r22, r22
 2ea:	71 f0       	breq	.+28     	; 0x308 <__floatsisf+0x74>
 2ec:	96 e8       	ldi	r25, 0x86	; 134
 2ee:	86 2f       	mov	r24, r22
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	2a f0       	brmi	.+10     	; 0x300 <__floatsisf+0x6c>
 2f6:	9a 95       	dec	r25
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	88 1f       	adc	r24, r24
 2fe:	da f7       	brpl	.-10     	; 0x2f6 <__floatsisf+0x62>
 300:	88 0f       	add	r24, r24
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	97 f9       	bld	r25, 7
 308:	08 95       	ret

0000030a <__fp_inf>:
 30a:	97 f9       	bld	r25, 7
 30c:	9f 67       	ori	r25, 0x7F	; 127
 30e:	80 e8       	ldi	r24, 0x80	; 128
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	08 95       	ret

00000316 <__fp_nan>:
 316:	9f ef       	ldi	r25, 0xFF	; 255
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	08 95       	ret

0000031c <__fp_pscA>:
 31c:	00 24       	eor	r0, r0
 31e:	0a 94       	dec	r0
 320:	16 16       	cp	r1, r22
 322:	17 06       	cpc	r1, r23
 324:	18 06       	cpc	r1, r24
 326:	09 06       	cpc	r0, r25
 328:	08 95       	ret

0000032a <__fp_pscB>:
 32a:	00 24       	eor	r0, r0
 32c:	0a 94       	dec	r0
 32e:	12 16       	cp	r1, r18
 330:	13 06       	cpc	r1, r19
 332:	14 06       	cpc	r1, r20
 334:	05 06       	cpc	r0, r21
 336:	08 95       	ret

00000338 <__fp_round>:
 338:	09 2e       	mov	r0, r25
 33a:	03 94       	inc	r0
 33c:	00 0c       	add	r0, r0
 33e:	11 f4       	brne	.+4      	; 0x344 <__fp_round+0xc>
 340:	88 23       	and	r24, r24
 342:	52 f0       	brmi	.+20     	; 0x358 <__fp_round+0x20>
 344:	bb 0f       	add	r27, r27
 346:	40 f4       	brcc	.+16     	; 0x358 <__fp_round+0x20>
 348:	bf 2b       	or	r27, r31
 34a:	11 f4       	brne	.+4      	; 0x350 <__fp_round+0x18>
 34c:	60 ff       	sbrs	r22, 0
 34e:	04 c0       	rjmp	.+8      	; 0x358 <__fp_round+0x20>
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	8f 4f       	sbci	r24, 0xFF	; 255
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__fp_split3>:
 35a:	57 fd       	sbrc	r21, 7
 35c:	90 58       	subi	r25, 0x80	; 128
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	59 f0       	breq	.+22     	; 0x37a <__fp_splitA+0x10>
 364:	5f 3f       	cpi	r21, 0xFF	; 255
 366:	71 f0       	breq	.+28     	; 0x384 <__fp_splitA+0x1a>
 368:	47 95       	ror	r20

0000036a <__fp_splitA>:
 36a:	88 0f       	add	r24, r24
 36c:	97 fb       	bst	r25, 7
 36e:	99 1f       	adc	r25, r25
 370:	61 f0       	breq	.+24     	; 0x38a <__fp_splitA+0x20>
 372:	9f 3f       	cpi	r25, 0xFF	; 255
 374:	79 f0       	breq	.+30     	; 0x394 <__fp_splitA+0x2a>
 376:	87 95       	ror	r24
 378:	08 95       	ret
 37a:	12 16       	cp	r1, r18
 37c:	13 06       	cpc	r1, r19
 37e:	14 06       	cpc	r1, r20
 380:	55 1f       	adc	r21, r21
 382:	f2 cf       	rjmp	.-28     	; 0x368 <__fp_split3+0xe>
 384:	46 95       	lsr	r20
 386:	f1 df       	rcall	.-30     	; 0x36a <__fp_splitA>
 388:	08 c0       	rjmp	.+16     	; 0x39a <__fp_splitA+0x30>
 38a:	16 16       	cp	r1, r22
 38c:	17 06       	cpc	r1, r23
 38e:	18 06       	cpc	r1, r24
 390:	99 1f       	adc	r25, r25
 392:	f1 cf       	rjmp	.-30     	; 0x376 <__fp_splitA+0xc>
 394:	86 95       	lsr	r24
 396:	71 05       	cpc	r23, r1
 398:	61 05       	cpc	r22, r1
 39a:	08 94       	sec
 39c:	08 95       	ret

0000039e <__fp_zero>:
 39e:	e8 94       	clt

000003a0 <__fp_szero>:
 3a0:	bb 27       	eor	r27, r27
 3a2:	66 27       	eor	r22, r22
 3a4:	77 27       	eor	r23, r23
 3a6:	cb 01       	movw	r24, r22
 3a8:	97 f9       	bld	r25, 7
 3aa:	08 95       	ret

000003ac <__mulsf3>:
 3ac:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__mulsf3x>
 3b0:	0c 94 9c 01 	jmp	0x338	; 0x338 <__fp_round>
 3b4:	0e 94 8e 01 	call	0x31c	; 0x31c <__fp_pscA>
 3b8:	38 f0       	brcs	.+14     	; 0x3c8 <__mulsf3+0x1c>
 3ba:	0e 94 95 01 	call	0x32a	; 0x32a <__fp_pscB>
 3be:	20 f0       	brcs	.+8      	; 0x3c8 <__mulsf3+0x1c>
 3c0:	95 23       	and	r25, r21
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <__mulsf3+0x1c>
 3c4:	0c 94 85 01 	jmp	0x30a	; 0x30a <__fp_inf>
 3c8:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_nan>
 3cc:	11 24       	eor	r1, r1
 3ce:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_szero>

000003d2 <__mulsf3x>:
 3d2:	0e 94 ad 01 	call	0x35a	; 0x35a <__fp_split3>
 3d6:	70 f3       	brcs	.-36     	; 0x3b4 <__mulsf3+0x8>

000003d8 <__mulsf3_pse>:
 3d8:	95 9f       	mul	r25, r21
 3da:	c1 f3       	breq	.-16     	; 0x3cc <__mulsf3+0x20>
 3dc:	95 0f       	add	r25, r21
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	55 1f       	adc	r21, r21
 3e2:	62 9f       	mul	r22, r18
 3e4:	f0 01       	movw	r30, r0
 3e6:	72 9f       	mul	r23, r18
 3e8:	bb 27       	eor	r27, r27
 3ea:	f0 0d       	add	r31, r0
 3ec:	b1 1d       	adc	r27, r1
 3ee:	63 9f       	mul	r22, r19
 3f0:	aa 27       	eor	r26, r26
 3f2:	f0 0d       	add	r31, r0
 3f4:	b1 1d       	adc	r27, r1
 3f6:	aa 1f       	adc	r26, r26
 3f8:	64 9f       	mul	r22, r20
 3fa:	66 27       	eor	r22, r22
 3fc:	b0 0d       	add	r27, r0
 3fe:	a1 1d       	adc	r26, r1
 400:	66 1f       	adc	r22, r22
 402:	82 9f       	mul	r24, r18
 404:	22 27       	eor	r18, r18
 406:	b0 0d       	add	r27, r0
 408:	a1 1d       	adc	r26, r1
 40a:	62 1f       	adc	r22, r18
 40c:	73 9f       	mul	r23, r19
 40e:	b0 0d       	add	r27, r0
 410:	a1 1d       	adc	r26, r1
 412:	62 1f       	adc	r22, r18
 414:	83 9f       	mul	r24, r19
 416:	a0 0d       	add	r26, r0
 418:	61 1d       	adc	r22, r1
 41a:	22 1f       	adc	r18, r18
 41c:	74 9f       	mul	r23, r20
 41e:	33 27       	eor	r19, r19
 420:	a0 0d       	add	r26, r0
 422:	61 1d       	adc	r22, r1
 424:	23 1f       	adc	r18, r19
 426:	84 9f       	mul	r24, r20
 428:	60 0d       	add	r22, r0
 42a:	21 1d       	adc	r18, r1
 42c:	82 2f       	mov	r24, r18
 42e:	76 2f       	mov	r23, r22
 430:	6a 2f       	mov	r22, r26
 432:	11 24       	eor	r1, r1
 434:	9f 57       	subi	r25, 0x7F	; 127
 436:	50 40       	sbci	r21, 0x00	; 0
 438:	9a f0       	brmi	.+38     	; 0x460 <__mulsf3_pse+0x88>
 43a:	f1 f0       	breq	.+60     	; 0x478 <__mulsf3_pse+0xa0>
 43c:	88 23       	and	r24, r24
 43e:	4a f0       	brmi	.+18     	; 0x452 <__mulsf3_pse+0x7a>
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	bb 1f       	adc	r27, r27
 446:	66 1f       	adc	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	91 50       	subi	r25, 0x01	; 1
 44e:	50 40       	sbci	r21, 0x00	; 0
 450:	a9 f7       	brne	.-22     	; 0x43c <__mulsf3_pse+0x64>
 452:	9e 3f       	cpi	r25, 0xFE	; 254
 454:	51 05       	cpc	r21, r1
 456:	80 f0       	brcs	.+32     	; 0x478 <__mulsf3_pse+0xa0>
 458:	0c 94 85 01 	jmp	0x30a	; 0x30a <__fp_inf>
 45c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_szero>
 460:	5f 3f       	cpi	r21, 0xFF	; 255
 462:	e4 f3       	brlt	.-8      	; 0x45c <__mulsf3_pse+0x84>
 464:	98 3e       	cpi	r25, 0xE8	; 232
 466:	d4 f3       	brlt	.-12     	; 0x45c <__mulsf3_pse+0x84>
 468:	86 95       	lsr	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b7 95       	ror	r27
 470:	f7 95       	ror	r31
 472:	e7 95       	ror	r30
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	c1 f7       	brne	.-16     	; 0x468 <__mulsf3_pse+0x90>
 478:	fe 2b       	or	r31, r30
 47a:	88 0f       	add	r24, r24
 47c:	91 1d       	adc	r25, r1
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	97 f9       	bld	r25, 7
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
