
DA5_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000180  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000133  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c3  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  00000b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 35 02 	jmp	0x46a	; 0x46a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
}

void delay(unsigned short count) // count will be delay time in ms
{
	int i; // variable for for-loop iterations
	for(i = 0; i < count; i++)
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	69 f0       	breq	.+26     	; 0x9e <delay+0x1e>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	ef ec       	ldi	r30, 0xCF	; 207
  8a:	f7 e0       	ldi	r31, 0x07	; 7
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <delay+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <delay+0x12>
  92:	00 00       	nop
  94:	2f 5f       	subi	r18, 0xFF	; 255
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	28 17       	cp	r18, r24
  9a:	39 07       	cpc	r19, r25
  9c:	a9 f7       	brne	.-22     	; 0x88 <delay+0x8>
  9e:	08 95       	ret

000000a0 <main>:
int main()
{
	unsigned short potValue; // will hold value of pot. from ADC
	unsigned short period = 50; // total period of 50ms
	
	ADMUX |= (1 << REFS0); // AVcc with ext. cap. at AREF pin
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	// ADCSRA will set prescaler to 8 and enable ADC
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	83 68       	ori	r24, 0x83	; 131
  b2:	80 83       	st	Z, r24
	
	DDRB = 0x01; // set PB0 as output
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; // DC motor will always be on
  b8:	15 b8       	out	0x05, r1	; 5
	// 1/1023 where 1023 is the max value of the 10-bit ADC
	// so the equation will be (value from pot. * 1/1023) or
	// (1 - (value from pot. * 1/1023)
	while(1)
	{
		ADCSRA |= (1 << ADSC); // start ADC conversion
  ba:	ca e7       	ldi	r28, 0x7A	; 122
  bc:	d0 e0       	ldi	r29, 0x00	; 0
		loop_until_bit_is_clear(ADCSRA, ADSC); // wait until ADC is done
		potValue = ADC; // store ADC value into potValue
  be:	08 e7       	ldi	r16, 0x78	; 120
  c0:	10 e0       	ldi	r17, 0x00	; 0
		else {
			// these  two stalls will essentially be 75% on and (1 - 75%) = 25% if
			// the value of the potentiometer was turned 75% of the way
			PORTB = 0; // turn DC motor on
			delay((unsigned short)(period * (potValue*(.000975)))); // stall for ratio of pot.
			PORTB = 1; // turn DC motor off
  c2:	ff 24       	eor	r15, r15
  c4:	f3 94       	inc	r15
	// 1/1023 where 1023 is the max value of the 10-bit ADC
	// so the equation will be (value from pot. * 1/1023) or
	// (1 - (value from pot. * 1/1023)
	while(1)
	{
		ADCSRA |= (1 << ADSC); // start ADC conversion
  c6:	88 81       	ld	r24, Y
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	88 83       	st	Y, r24
		loop_until_bit_is_clear(ADCSRA, ADSC); // wait until ADC is done
  cc:	88 81       	ld	r24, Y
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0x2c>
		potValue = ADC; // store ADC value into potValue
  d2:	f8 01       	movw	r30, r16
  d4:	60 81       	ld	r22, Z
  d6:	71 81       	ldd	r23, Z+1	; 0x01
		if (potValue == 0) // if potentiometer is turned completely off
  d8:	61 15       	cp	r22, r1
  da:	71 05       	cpc	r23, r1
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x42>
			PORTB = 1; // turn DC motor off
  de:	f5 b8       	out	0x05, r15	; 5
  e0:	f2 cf       	rjmp	.-28     	; 0xc6 <main+0x26>
		else {
			// these  two stalls will essentially be 75% on and (1 - 75%) = 25% if
			// the value of the potentiometer was turned 75% of the way
			PORTB = 0; // turn DC motor on
  e2:	15 b8       	out	0x05, r1	; 5
			delay((unsigned short)(period * (potValue*(.000975)))); // stall for ratio of pot.
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 3a 01 	call	0x274	; 0x274 <__floatunsisf>
  ec:	24 e2       	ldi	r18, 0x24	; 36
  ee:	37 e9       	ldi	r19, 0x97	; 151
  f0:	4f e7       	ldi	r20, 0x7F	; 127
  f2:	5a e3       	ldi	r21, 0x3A	; 58
  f4:	0e 94 c8 01 	call	0x390	; 0x390 <__mulsf3>
  f8:	4b 01       	movw	r8, r22
  fa:	5c 01       	movw	r10, r24
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	48 e4       	ldi	r20, 0x48	; 72
 102:	52 e4       	ldi	r21, 0x42	; 66
 104:	0e 94 c8 01 	call	0x390	; 0x390 <__mulsf3>
 108:	0e 94 0b 01 	call	0x216	; 0x216 <__fixunssfsi>
 10c:	cb 01       	movw	r24, r22
 10e:	0e 94 40 00 	call	0x80	; 0x80 <delay>
			PORTB = 1; // turn DC motor off
 112:	f5 b8       	out	0x05, r15	; 5
			delay((unsigned short)(period * (1 - (potValue*(.000975))))); // stall for (1 - ratio of pot.)
 114:	a5 01       	movw	r20, r10
 116:	94 01       	movw	r18, r8
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	9f e3       	ldi	r25, 0x3F	; 63
 120:	0e 94 9e 00 	call	0x13c	; 0x13c <__subsf3>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	48 e4       	ldi	r20, 0x48	; 72
 12a:	52 e4       	ldi	r21, 0x42	; 66
 12c:	0e 94 c8 01 	call	0x390	; 0x390 <__mulsf3>
 130:	0e 94 0b 01 	call	0x216	; 0x216 <__fixunssfsi>
 134:	cb 01       	movw	r24, r22
 136:	0e 94 40 00 	call	0x80	; 0x80 <delay>
 13a:	c5 cf       	rjmp	.-118    	; 0xc6 <main+0x26>

0000013c <__subsf3>:
 13c:	50 58       	subi	r21, 0x80	; 128

0000013e <__addsf3>:
 13e:	bb 27       	eor	r27, r27
 140:	aa 27       	eor	r26, r26
 142:	0e 94 b6 00 	call	0x16c	; 0x16c <__addsf3x>
 146:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__fp_round>
 14a:	0e 94 80 01 	call	0x300	; 0x300 <__fp_pscA>
 14e:	38 f0       	brcs	.+14     	; 0x15e <__addsf3+0x20>
 150:	0e 94 87 01 	call	0x30e	; 0x30e <__fp_pscB>
 154:	20 f0       	brcs	.+8      	; 0x15e <__addsf3+0x20>
 156:	39 f4       	brne	.+14     	; 0x166 <__addsf3+0x28>
 158:	9f 3f       	cpi	r25, 0xFF	; 255
 15a:	19 f4       	brne	.+6      	; 0x162 <__addsf3+0x24>
 15c:	26 f4       	brtc	.+8      	; 0x166 <__addsf3+0x28>
 15e:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__fp_nan>
 162:	0e f4       	brtc	.+2      	; 0x166 <__addsf3+0x28>
 164:	e0 95       	com	r30
 166:	e7 fb       	bst	r30, 7
 168:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__fp_inf>

0000016c <__addsf3x>:
 16c:	e9 2f       	mov	r30, r25
 16e:	0e 94 9f 01 	call	0x33e	; 0x33e <__fp_split3>
 172:	58 f3       	brcs	.-42     	; 0x14a <__addsf3+0xc>
 174:	ba 17       	cp	r27, r26
 176:	62 07       	cpc	r22, r18
 178:	73 07       	cpc	r23, r19
 17a:	84 07       	cpc	r24, r20
 17c:	95 07       	cpc	r25, r21
 17e:	20 f0       	brcs	.+8      	; 0x188 <__addsf3x+0x1c>
 180:	79 f4       	brne	.+30     	; 0x1a0 <__addsf3x+0x34>
 182:	a6 f5       	brtc	.+104    	; 0x1ec <__addsf3x+0x80>
 184:	0c 94 c1 01 	jmp	0x382	; 0x382 <__fp_zero>
 188:	0e f4       	brtc	.+2      	; 0x18c <__addsf3x+0x20>
 18a:	e0 95       	com	r30
 18c:	0b 2e       	mov	r0, r27
 18e:	ba 2f       	mov	r27, r26
 190:	a0 2d       	mov	r26, r0
 192:	0b 01       	movw	r0, r22
 194:	b9 01       	movw	r22, r18
 196:	90 01       	movw	r18, r0
 198:	0c 01       	movw	r0, r24
 19a:	ca 01       	movw	r24, r20
 19c:	a0 01       	movw	r20, r0
 19e:	11 24       	eor	r1, r1
 1a0:	ff 27       	eor	r31, r31
 1a2:	59 1b       	sub	r21, r25
 1a4:	99 f0       	breq	.+38     	; 0x1cc <__addsf3x+0x60>
 1a6:	59 3f       	cpi	r21, 0xF9	; 249
 1a8:	50 f4       	brcc	.+20     	; 0x1be <__addsf3x+0x52>
 1aa:	50 3e       	cpi	r21, 0xE0	; 224
 1ac:	68 f1       	brcs	.+90     	; 0x208 <__addsf3x+0x9c>
 1ae:	1a 16       	cp	r1, r26
 1b0:	f0 40       	sbci	r31, 0x00	; 0
 1b2:	a2 2f       	mov	r26, r18
 1b4:	23 2f       	mov	r18, r19
 1b6:	34 2f       	mov	r19, r20
 1b8:	44 27       	eor	r20, r20
 1ba:	58 5f       	subi	r21, 0xF8	; 248
 1bc:	f3 cf       	rjmp	.-26     	; 0x1a4 <__addsf3x+0x38>
 1be:	46 95       	lsr	r20
 1c0:	37 95       	ror	r19
 1c2:	27 95       	ror	r18
 1c4:	a7 95       	ror	r26
 1c6:	f0 40       	sbci	r31, 0x00	; 0
 1c8:	53 95       	inc	r21
 1ca:	c9 f7       	brne	.-14     	; 0x1be <__addsf3x+0x52>
 1cc:	7e f4       	brtc	.+30     	; 0x1ec <__addsf3x+0x80>
 1ce:	1f 16       	cp	r1, r31
 1d0:	ba 0b       	sbc	r27, r26
 1d2:	62 0b       	sbc	r22, r18
 1d4:	73 0b       	sbc	r23, r19
 1d6:	84 0b       	sbc	r24, r20
 1d8:	ba f0       	brmi	.+46     	; 0x208 <__addsf3x+0x9c>
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	a1 f0       	breq	.+40     	; 0x206 <__addsf3x+0x9a>
 1de:	ff 0f       	add	r31, r31
 1e0:	bb 1f       	adc	r27, r27
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	88 1f       	adc	r24, r24
 1e8:	c2 f7       	brpl	.-16     	; 0x1da <__addsf3x+0x6e>
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <__addsf3x+0x9c>
 1ec:	ba 0f       	add	r27, r26
 1ee:	62 1f       	adc	r22, r18
 1f0:	73 1f       	adc	r23, r19
 1f2:	84 1f       	adc	r24, r20
 1f4:	48 f4       	brcc	.+18     	; 0x208 <__addsf3x+0x9c>
 1f6:	87 95       	ror	r24
 1f8:	77 95       	ror	r23
 1fa:	67 95       	ror	r22
 1fc:	b7 95       	ror	r27
 1fe:	f7 95       	ror	r31
 200:	9e 3f       	cpi	r25, 0xFE	; 254
 202:	08 f0       	brcs	.+2      	; 0x206 <__addsf3x+0x9a>
 204:	b0 cf       	rjmp	.-160    	; 0x166 <__addsf3+0x28>
 206:	93 95       	inc	r25
 208:	88 0f       	add	r24, r24
 20a:	08 f0       	brcs	.+2      	; 0x20e <__addsf3x+0xa2>
 20c:	99 27       	eor	r25, r25
 20e:	ee 0f       	add	r30, r30
 210:	97 95       	ror	r25
 212:	87 95       	ror	r24
 214:	08 95       	ret

00000216 <__fixunssfsi>:
 216:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_splitA>
 21a:	88 f0       	brcs	.+34     	; 0x23e <__fixunssfsi+0x28>
 21c:	9f 57       	subi	r25, 0x7F	; 127
 21e:	98 f0       	brcs	.+38     	; 0x246 <__fixunssfsi+0x30>
 220:	b9 2f       	mov	r27, r25
 222:	99 27       	eor	r25, r25
 224:	b7 51       	subi	r27, 0x17	; 23
 226:	b0 f0       	brcs	.+44     	; 0x254 <__fixunssfsi+0x3e>
 228:	e1 f0       	breq	.+56     	; 0x262 <__fixunssfsi+0x4c>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	88 1f       	adc	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	1a f0       	brmi	.+6      	; 0x23a <__fixunssfsi+0x24>
 234:	ba 95       	dec	r27
 236:	c9 f7       	brne	.-14     	; 0x22a <__fixunssfsi+0x14>
 238:	14 c0       	rjmp	.+40     	; 0x262 <__fixunssfsi+0x4c>
 23a:	b1 30       	cpi	r27, 0x01	; 1
 23c:	91 f0       	breq	.+36     	; 0x262 <__fixunssfsi+0x4c>
 23e:	0e 94 c1 01 	call	0x382	; 0x382 <__fp_zero>
 242:	b1 e0       	ldi	r27, 0x01	; 1
 244:	08 95       	ret
 246:	0c 94 c1 01 	jmp	0x382	; 0x382 <__fp_zero>
 24a:	67 2f       	mov	r22, r23
 24c:	78 2f       	mov	r23, r24
 24e:	88 27       	eor	r24, r24
 250:	b8 5f       	subi	r27, 0xF8	; 248
 252:	39 f0       	breq	.+14     	; 0x262 <__fixunssfsi+0x4c>
 254:	b9 3f       	cpi	r27, 0xF9	; 249
 256:	cc f3       	brlt	.-14     	; 0x24a <__fixunssfsi+0x34>
 258:	86 95       	lsr	r24
 25a:	77 95       	ror	r23
 25c:	67 95       	ror	r22
 25e:	b3 95       	inc	r27
 260:	d9 f7       	brne	.-10     	; 0x258 <__fixunssfsi+0x42>
 262:	3e f4       	brtc	.+14     	; 0x272 <__fixunssfsi+0x5c>
 264:	90 95       	com	r25
 266:	80 95       	com	r24
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	8f 4f       	sbci	r24, 0xFF	; 255
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <__floatunsisf>:
 274:	e8 94       	clt
 276:	09 c0       	rjmp	.+18     	; 0x28a <__floatsisf+0x12>

00000278 <__floatsisf>:
 278:	97 fb       	bst	r25, 7
 27a:	3e f4       	brtc	.+14     	; 0x28a <__floatsisf+0x12>
 27c:	90 95       	com	r25
 27e:	80 95       	com	r24
 280:	70 95       	com	r23
 282:	61 95       	neg	r22
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	99 23       	and	r25, r25
 28c:	a9 f0       	breq	.+42     	; 0x2b8 <__floatsisf+0x40>
 28e:	f9 2f       	mov	r31, r25
 290:	96 e9       	ldi	r25, 0x96	; 150
 292:	bb 27       	eor	r27, r27
 294:	93 95       	inc	r25
 296:	f6 95       	lsr	r31
 298:	87 95       	ror	r24
 29a:	77 95       	ror	r23
 29c:	67 95       	ror	r22
 29e:	b7 95       	ror	r27
 2a0:	f1 11       	cpse	r31, r1
 2a2:	f8 cf       	rjmp	.-16     	; 0x294 <__floatsisf+0x1c>
 2a4:	fa f4       	brpl	.+62     	; 0x2e4 <__floatsisf+0x6c>
 2a6:	bb 0f       	add	r27, r27
 2a8:	11 f4       	brne	.+4      	; 0x2ae <__floatsisf+0x36>
 2aa:	60 ff       	sbrs	r22, 0
 2ac:	1b c0       	rjmp	.+54     	; 0x2e4 <__floatsisf+0x6c>
 2ae:	6f 5f       	subi	r22, 0xFF	; 255
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8f 4f       	sbci	r24, 0xFF	; 255
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <__floatsisf+0x6c>
 2b8:	88 23       	and	r24, r24
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <__floatsisf+0x48>
 2bc:	96 e9       	ldi	r25, 0x96	; 150
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <__floatsisf+0x6a>
 2c0:	77 23       	and	r23, r23
 2c2:	21 f0       	breq	.+8      	; 0x2cc <__floatsisf+0x54>
 2c4:	9e e8       	ldi	r25, 0x8E	; 142
 2c6:	87 2f       	mov	r24, r23
 2c8:	76 2f       	mov	r23, r22
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <__floatsisf+0x5e>
 2cc:	66 23       	and	r22, r22
 2ce:	71 f0       	breq	.+28     	; 0x2ec <__floatsisf+0x74>
 2d0:	96 e8       	ldi	r25, 0x86	; 134
 2d2:	86 2f       	mov	r24, r22
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	2a f0       	brmi	.+10     	; 0x2e4 <__floatsisf+0x6c>
 2da:	9a 95       	dec	r25
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	88 1f       	adc	r24, r24
 2e2:	da f7       	brpl	.-10     	; 0x2da <__floatsisf+0x62>
 2e4:	88 0f       	add	r24, r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	97 f9       	bld	r25, 7
 2ec:	08 95       	ret

000002ee <__fp_inf>:
 2ee:	97 f9       	bld	r25, 7
 2f0:	9f 67       	ori	r25, 0x7F	; 127
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	08 95       	ret

000002fa <__fp_nan>:
 2fa:	9f ef       	ldi	r25, 0xFF	; 255
 2fc:	80 ec       	ldi	r24, 0xC0	; 192
 2fe:	08 95       	ret

00000300 <__fp_pscA>:
 300:	00 24       	eor	r0, r0
 302:	0a 94       	dec	r0
 304:	16 16       	cp	r1, r22
 306:	17 06       	cpc	r1, r23
 308:	18 06       	cpc	r1, r24
 30a:	09 06       	cpc	r0, r25
 30c:	08 95       	ret

0000030e <__fp_pscB>:
 30e:	00 24       	eor	r0, r0
 310:	0a 94       	dec	r0
 312:	12 16       	cp	r1, r18
 314:	13 06       	cpc	r1, r19
 316:	14 06       	cpc	r1, r20
 318:	05 06       	cpc	r0, r21
 31a:	08 95       	ret

0000031c <__fp_round>:
 31c:	09 2e       	mov	r0, r25
 31e:	03 94       	inc	r0
 320:	00 0c       	add	r0, r0
 322:	11 f4       	brne	.+4      	; 0x328 <__fp_round+0xc>
 324:	88 23       	and	r24, r24
 326:	52 f0       	brmi	.+20     	; 0x33c <__fp_round+0x20>
 328:	bb 0f       	add	r27, r27
 32a:	40 f4       	brcc	.+16     	; 0x33c <__fp_round+0x20>
 32c:	bf 2b       	or	r27, r31
 32e:	11 f4       	brne	.+4      	; 0x334 <__fp_round+0x18>
 330:	60 ff       	sbrs	r22, 0
 332:	04 c0       	rjmp	.+8      	; 0x33c <__fp_round+0x20>
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	8f 4f       	sbci	r24, 0xFF	; 255
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	08 95       	ret

0000033e <__fp_split3>:
 33e:	57 fd       	sbrc	r21, 7
 340:	90 58       	subi	r25, 0x80	; 128
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	59 f0       	breq	.+22     	; 0x35e <__fp_splitA+0x10>
 348:	5f 3f       	cpi	r21, 0xFF	; 255
 34a:	71 f0       	breq	.+28     	; 0x368 <__fp_splitA+0x1a>
 34c:	47 95       	ror	r20

0000034e <__fp_splitA>:
 34e:	88 0f       	add	r24, r24
 350:	97 fb       	bst	r25, 7
 352:	99 1f       	adc	r25, r25
 354:	61 f0       	breq	.+24     	; 0x36e <__fp_splitA+0x20>
 356:	9f 3f       	cpi	r25, 0xFF	; 255
 358:	79 f0       	breq	.+30     	; 0x378 <__fp_splitA+0x2a>
 35a:	87 95       	ror	r24
 35c:	08 95       	ret
 35e:	12 16       	cp	r1, r18
 360:	13 06       	cpc	r1, r19
 362:	14 06       	cpc	r1, r20
 364:	55 1f       	adc	r21, r21
 366:	f2 cf       	rjmp	.-28     	; 0x34c <__fp_split3+0xe>
 368:	46 95       	lsr	r20
 36a:	f1 df       	rcall	.-30     	; 0x34e <__fp_splitA>
 36c:	08 c0       	rjmp	.+16     	; 0x37e <__fp_splitA+0x30>
 36e:	16 16       	cp	r1, r22
 370:	17 06       	cpc	r1, r23
 372:	18 06       	cpc	r1, r24
 374:	99 1f       	adc	r25, r25
 376:	f1 cf       	rjmp	.-30     	; 0x35a <__fp_splitA+0xc>
 378:	86 95       	lsr	r24
 37a:	71 05       	cpc	r23, r1
 37c:	61 05       	cpc	r22, r1
 37e:	08 94       	sec
 380:	08 95       	ret

00000382 <__fp_zero>:
 382:	e8 94       	clt

00000384 <__fp_szero>:
 384:	bb 27       	eor	r27, r27
 386:	66 27       	eor	r22, r22
 388:	77 27       	eor	r23, r23
 38a:	cb 01       	movw	r24, r22
 38c:	97 f9       	bld	r25, 7
 38e:	08 95       	ret

00000390 <__mulsf3>:
 390:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__mulsf3x>
 394:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__fp_round>
 398:	0e 94 80 01 	call	0x300	; 0x300 <__fp_pscA>
 39c:	38 f0       	brcs	.+14     	; 0x3ac <__mulsf3+0x1c>
 39e:	0e 94 87 01 	call	0x30e	; 0x30e <__fp_pscB>
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <__mulsf3+0x1c>
 3a4:	95 23       	and	r25, r21
 3a6:	11 f0       	breq	.+4      	; 0x3ac <__mulsf3+0x1c>
 3a8:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__fp_inf>
 3ac:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__fp_nan>
 3b0:	11 24       	eor	r1, r1
 3b2:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_szero>

000003b6 <__mulsf3x>:
 3b6:	0e 94 9f 01 	call	0x33e	; 0x33e <__fp_split3>
 3ba:	70 f3       	brcs	.-36     	; 0x398 <__mulsf3+0x8>

000003bc <__mulsf3_pse>:
 3bc:	95 9f       	mul	r25, r21
 3be:	c1 f3       	breq	.-16     	; 0x3b0 <__mulsf3+0x20>
 3c0:	95 0f       	add	r25, r21
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	55 1f       	adc	r21, r21
 3c6:	62 9f       	mul	r22, r18
 3c8:	f0 01       	movw	r30, r0
 3ca:	72 9f       	mul	r23, r18
 3cc:	bb 27       	eor	r27, r27
 3ce:	f0 0d       	add	r31, r0
 3d0:	b1 1d       	adc	r27, r1
 3d2:	63 9f       	mul	r22, r19
 3d4:	aa 27       	eor	r26, r26
 3d6:	f0 0d       	add	r31, r0
 3d8:	b1 1d       	adc	r27, r1
 3da:	aa 1f       	adc	r26, r26
 3dc:	64 9f       	mul	r22, r20
 3de:	66 27       	eor	r22, r22
 3e0:	b0 0d       	add	r27, r0
 3e2:	a1 1d       	adc	r26, r1
 3e4:	66 1f       	adc	r22, r22
 3e6:	82 9f       	mul	r24, r18
 3e8:	22 27       	eor	r18, r18
 3ea:	b0 0d       	add	r27, r0
 3ec:	a1 1d       	adc	r26, r1
 3ee:	62 1f       	adc	r22, r18
 3f0:	73 9f       	mul	r23, r19
 3f2:	b0 0d       	add	r27, r0
 3f4:	a1 1d       	adc	r26, r1
 3f6:	62 1f       	adc	r22, r18
 3f8:	83 9f       	mul	r24, r19
 3fa:	a0 0d       	add	r26, r0
 3fc:	61 1d       	adc	r22, r1
 3fe:	22 1f       	adc	r18, r18
 400:	74 9f       	mul	r23, r20
 402:	33 27       	eor	r19, r19
 404:	a0 0d       	add	r26, r0
 406:	61 1d       	adc	r22, r1
 408:	23 1f       	adc	r18, r19
 40a:	84 9f       	mul	r24, r20
 40c:	60 0d       	add	r22, r0
 40e:	21 1d       	adc	r18, r1
 410:	82 2f       	mov	r24, r18
 412:	76 2f       	mov	r23, r22
 414:	6a 2f       	mov	r22, r26
 416:	11 24       	eor	r1, r1
 418:	9f 57       	subi	r25, 0x7F	; 127
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	9a f0       	brmi	.+38     	; 0x444 <__mulsf3_pse+0x88>
 41e:	f1 f0       	breq	.+60     	; 0x45c <__mulsf3_pse+0xa0>
 420:	88 23       	and	r24, r24
 422:	4a f0       	brmi	.+18     	; 0x436 <__mulsf3_pse+0x7a>
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	bb 1f       	adc	r27, r27
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	91 50       	subi	r25, 0x01	; 1
 432:	50 40       	sbci	r21, 0x00	; 0
 434:	a9 f7       	brne	.-22     	; 0x420 <__mulsf3_pse+0x64>
 436:	9e 3f       	cpi	r25, 0xFE	; 254
 438:	51 05       	cpc	r21, r1
 43a:	80 f0       	brcs	.+32     	; 0x45c <__mulsf3_pse+0xa0>
 43c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__fp_inf>
 440:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_szero>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	e4 f3       	brlt	.-8      	; 0x440 <__mulsf3_pse+0x84>
 448:	98 3e       	cpi	r25, 0xE8	; 232
 44a:	d4 f3       	brlt	.-12     	; 0x440 <__mulsf3_pse+0x84>
 44c:	86 95       	lsr	r24
 44e:	77 95       	ror	r23
 450:	67 95       	ror	r22
 452:	b7 95       	ror	r27
 454:	f7 95       	ror	r31
 456:	e7 95       	ror	r30
 458:	9f 5f       	subi	r25, 0xFF	; 255
 45a:	c1 f7       	brne	.-16     	; 0x44c <__mulsf3_pse+0x90>
 45c:	fe 2b       	or	r31, r30
 45e:	88 0f       	add	r24, r24
 460:	91 1d       	adc	r25, r1
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	97 f9       	bld	r25, 7
 468:	08 95       	ret

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
