
DA3_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000020b  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000168  00000000  00000000  00000623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000169  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001da  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{
	// UBRR = (F_CPU / (16 * 9600)) - 1
	// UBRR = (8 MHz / (16 * 9600)) - 1 = 51 or 0x33
	UBRR0L = 0x33; // set based on equation using baud rate of 9600
  90:	83 e3       	ldi	r24, 0x33	; 51
  92:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0B	= (1 << TXEN0); // Enable transmitter
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C	= (1 << UCSZ01) | (1 << UCSZ00); // 8 bit data
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24
	
	ADMUX	= 0; // use ADC0
  a2:	ec e7       	ldi	r30, 0x7C	; 124
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	ADMUX	|= (1 << REFS0); // use AVcc as the reference
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADPS2) | (1 << ADPS1); // 64 prescale for 16Mhz
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADATE); // Set ADC Auto Trigger Enable
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	ADCSRB	= 0; // 0 for free running mode
  be:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA	|= (1 << ADEN); // Enable the ADC
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADIE); // Enable Interrupts
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADSC); // Start the ADC conversion
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	sei();
  d4:	78 94       	sei

	while(1) // loop forever and wait for ADC interrupt
	{
	}
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x46>

000000d8 <USART0SendByte>:
}

void USART0SendByte(char u8Data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
  d8:	e0 ec       	ldi	r30, 0xC0	; 192
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	95 ff       	sbrs	r25, 5
  e0:	fd cf       	rjmp	.-6      	; 0xdc <USART0SendByte+0x4>

	// Transmit data
	UDR0 = u8Data;
  e2:	80 93 c6 00 	sts	0x00C6, r24
  e6:	08 95       	ret

000000e8 <delay>:
}

void delay () {
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	ef e1       	ldi	r30, 0x1F	; 31
  ee:	fe e4       	ldi	r31, 0x4E	; 78
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <delay+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <delay+0xe>
  f6:	00 00       	nop
  f8:	01 97       	sbiw	r24, 0x01	; 1
	int i;					// declare i for counter
	for(i = 0; i < 100; i++) {	// loop 100 times
  fa:	c1 f7       	brne	.-16     	; 0xec <delay+0x4>
		_delay_ms(10);		//	delay 10 ms
	}						// total delay = 100*10ms = 1000ms
}
  fc:	08 95       	ret

000000fe <__vector_21>:
	{
	}
}

ISR(ADC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	ADCvalue = ADC; // read all bits of ADC (10) and store into ADCvalue
 128:	80 91 78 00 	lds	r24, 0x0078
 12c:	90 91 79 00 	lds	r25, 0x0079
 130:	90 93 06 01 	sts	0x0106, r25
 134:	80 93 05 01 	sts	0x0105, r24
	temperature = ADCvalue; // copy value into new variable in case ADC overwrites it
 138:	80 91 05 01 	lds	r24, 0x0105
 13c:	90 91 06 01 	lds	r25, 0x0106
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	80 93 00 01 	sts	0x0100, r24
 148:	90 93 01 01 	sts	0x0101, r25
 14c:	a0 93 02 01 	sts	0x0102, r26
 150:	b0 93 03 01 	sts	0x0103, r27
	// equation used to convert ADC value is:
	// (ADC register * 5 * 100) / 1024
	// which is the ADC multiplied by the reference voltage multiplied by 100
	// since the LM34 sensor gives its value in mV and then divide by 1024 since
	// a ten bit register will have a max value of 2^10 or 1024
	temperature = temperature*5;
 154:	80 91 00 01 	lds	r24, 0x0100
 158:	90 91 01 01 	lds	r25, 0x0101
 15c:	a0 91 02 01 	lds	r26, 0x0102
 160:	b0 91 03 01 	lds	r27, 0x0103
 164:	ac 01       	movw	r20, r24
 166:	bd 01       	movw	r22, r26
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	84 0f       	add	r24, r20
 17a:	95 1f       	adc	r25, r21
 17c:	a6 1f       	adc	r26, r22
 17e:	b7 1f       	adc	r27, r23
 180:	80 93 00 01 	sts	0x0100, r24
 184:	90 93 01 01 	sts	0x0101, r25
 188:	a0 93 02 01 	sts	0x0102, r26
 18c:	b0 93 03 01 	sts	0x0103, r27
	temperature = temperature*100;
 190:	20 91 00 01 	lds	r18, 0x0100
 194:	30 91 01 01 	lds	r19, 0x0101
 198:	40 91 02 01 	lds	r20, 0x0102
 19c:	50 91 03 01 	lds	r21, 0x0103
 1a0:	a4 e6       	ldi	r26, 0x64	; 100
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__muluhisi3>
 1a8:	60 93 00 01 	sts	0x0100, r22
 1ac:	70 93 01 01 	sts	0x0101, r23
 1b0:	80 93 02 01 	sts	0x0102, r24
 1b4:	90 93 03 01 	sts	0x0103, r25
	temperature = temperature/1024;
 1b8:	80 91 00 01 	lds	r24, 0x0100
 1bc:	90 91 01 01 	lds	r25, 0x0101
 1c0:	a0 91 02 01 	lds	r26, 0x0102
 1c4:	b0 91 03 01 	lds	r27, 0x0103
 1c8:	07 2e       	mov	r0, r23
 1ca:	7a e0       	ldi	r23, 0x0A	; 10
 1cc:	b6 95       	lsr	r27
 1ce:	a7 95       	ror	r26
 1d0:	97 95       	ror	r25
 1d2:	87 95       	ror	r24
 1d4:	7a 95       	dec	r23
 1d6:	d1 f7       	brne	.-12     	; 0x1cc <__vector_21+0xce>
 1d8:	70 2d       	mov	r23, r0
 1da:	80 93 00 01 	sts	0x0100, r24
 1de:	90 93 01 01 	sts	0x0101, r25
 1e2:	a0 93 02 01 	sts	0x0102, r26
 1e6:	b0 93 03 01 	sts	0x0103, r27
	temp_out = temperature / 10; // dividing 2 digit temp (i.e. 75 or 80) will give tens digit
 1ea:	60 91 00 01 	lds	r22, 0x0100
 1ee:	70 91 01 01 	lds	r23, 0x0101
 1f2:	80 91 02 01 	lds	r24, 0x0102
 1f6:	90 91 03 01 	lds	r25, 0x0103
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fa e0       	ldi	r31, 0x0A	; 10
 1fe:	cf 2e       	mov	r12, r31
 200:	d1 2c       	mov	r13, r1
 202:	e1 2c       	mov	r14, r1
 204:	f1 2c       	mov	r15, r1
 206:	f0 2d       	mov	r31, r0
 208:	a7 01       	movw	r20, r14
 20a:	96 01       	movw	r18, r12
 20c:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodsi4>
 210:	20 93 04 01 	sts	0x0104, r18
	USART0SendByte((temp_out+'0')); // output tens digit converted to its matching char
 214:	80 91 04 01 	lds	r24, 0x0104
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART0SendByte>
	temp_out = temperature % 10; // % 10 will give the ones digit of a 2 digit temp
 21e:	60 91 00 01 	lds	r22, 0x0100
 222:	70 91 01 01 	lds	r23, 0x0101
 226:	80 91 02 01 	lds	r24, 0x0102
 22a:	90 91 03 01 	lds	r25, 0x0103
 22e:	a7 01       	movw	r20, r14
 230:	96 01       	movw	r18, r12
 232:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodsi4>
 236:	60 93 04 01 	sts	0x0104, r22
	USART0SendByte((temp_out+'0')); // output ones digit converted to its matching char
 23a:	80 91 04 01 	lds	r24, 0x0104
 23e:	80 5d       	subi	r24, 0xD0	; 208
 240:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART0SendByte>
	USART0SendByte('\n'); // send a line feed to the terminal
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART0SendByte>
	USART0SendByte('\r'); // send return to the terminal to move cursor of terminal
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART0SendByte>
	delay(); // delay for 1000 ms or 1 second
 250:	0e 94 74 00 	call	0xe8	; 0xe8 <delay>
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__udivmodsi4>:
 27e:	a1 e2       	ldi	r26, 0x21	; 33
 280:	1a 2e       	mov	r1, r26
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	fd 01       	movw	r30, r26
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <__udivmodsi4_ep>

0000028a <__udivmodsi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	ee 1f       	adc	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	a2 17       	cp	r26, r18
 294:	b3 07       	cpc	r27, r19
 296:	e4 07       	cpc	r30, r20
 298:	f5 07       	cpc	r31, r21
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__udivmodsi4_ep>
 29c:	a2 1b       	sub	r26, r18
 29e:	b3 0b       	sbc	r27, r19
 2a0:	e4 0b       	sbc	r30, r20
 2a2:	f5 0b       	sbc	r31, r21

000002a4 <__udivmodsi4_ep>:
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a 94       	dec	r1
 2ae:	69 f7       	brne	.-38     	; 0x28a <__udivmodsi4_loop>
 2b0:	60 95       	com	r22
 2b2:	70 95       	com	r23
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	bd 01       	movw	r22, r26
 2be:	cf 01       	movw	r24, r30
 2c0:	08 95       	ret

000002c2 <__muluhisi3>:
 2c2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__umulhisi3>
 2c6:	a5 9f       	mul	r26, r21
 2c8:	90 0d       	add	r25, r0
 2ca:	b4 9f       	mul	r27, r20
 2cc:	90 0d       	add	r25, r0
 2ce:	a4 9f       	mul	r26, r20
 2d0:	80 0d       	add	r24, r0
 2d2:	91 1d       	adc	r25, r1
 2d4:	11 24       	eor	r1, r1
 2d6:	08 95       	ret

000002d8 <__umulhisi3>:
 2d8:	a2 9f       	mul	r26, r18
 2da:	b0 01       	movw	r22, r0
 2dc:	b3 9f       	mul	r27, r19
 2de:	c0 01       	movw	r24, r0
 2e0:	a3 9f       	mul	r26, r19
 2e2:	70 0d       	add	r23, r0
 2e4:	81 1d       	adc	r24, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	91 1d       	adc	r25, r1
 2ea:	b2 9f       	mul	r27, r18
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
