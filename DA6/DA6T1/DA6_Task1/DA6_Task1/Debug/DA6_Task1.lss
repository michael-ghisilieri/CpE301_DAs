
DA6_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000080c  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000201  0080010c  0080010c  000008ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000386  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f6  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000339  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000607  00000000  00000000  00001ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  54:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_21>
  58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d8 e0       	ldi	r29, 0x08	; 8
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	ec e0       	ldi	r30, 0x0C	; 12
 25c:	f8 e0       	ldi	r31, 0x08	; 8
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
 260:	05 90       	lpm	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	ac 30       	cpi	r26, 0x0C	; 12
 266:	b1 07       	cpc	r27, r17
 268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	ac e0       	ldi	r26, 0x0C	; 12
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
 272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
 274:	ad 30       	cpi	r26, 0x0D	; 13
 276:	b2 07       	cpc	r27, r18
 278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
 27a:	0e 94 43 01 	call	0x286	; 0x286 <main>
 27e:	0c 94 04 04 	jmp	0x808	; 0x808 <_exit>

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <main>:
volatile uint16_t ADCvalue; // Global variable, set to volatile if used with ISR
volatile char temp_out; // current digit of temperature being transmitted

int main(void)
{	
	nokia_lcd_init(); // initialize the LCD
 286:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <nokia_lcd_init>
	nokia_lcd_clear(); // clear the LCD
 28a:	0e 94 9b 02 	call	0x536	; 0x536 <nokia_lcd_clear>
	
	ADMUX	= 0; // use ADC0
 28e:	ec e7       	ldi	r30, 0x7C	; 124
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	10 82       	st	Z, r1
	ADMUX	|= (1 << REFS0); // use AVcc as the reference
 294:	80 81       	ld	r24, Z
 296:	80 64       	ori	r24, 0x40	; 64
 298:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADPS2) | (1 << ADPS1); // 64 prescale for 16Mhz
 29a:	ea e7       	ldi	r30, 0x7A	; 122
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	86 60       	ori	r24, 0x06	; 6
 2a2:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADATE); // Set ADC Auto Trigger Enable
 2a4:	80 81       	ld	r24, Z
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	80 83       	st	Z, r24
	ADCSRB	= 0; // 0 for free running mode
 2aa:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA	|= (1 << ADEN); // Enable the ADC
 2ae:	80 81       	ld	r24, Z
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADIE); // Enable Interrupts
 2b4:	80 81       	ld	r24, Z
 2b6:	88 60       	ori	r24, 0x08	; 8
 2b8:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADSC); // Start the ADC conversion
 2ba:	80 81       	ld	r24, Z
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	80 83       	st	Z, r24
	sei();
 2c0:	78 94       	sei

	while(1) // loop forever and wait for ADC interrupt
	{	
	}
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x3c>

000002c4 <delay>:
	nokia_lcd_write_char(temp_out+'0', 4); // print ones digit with size scale of 4
	nokia_lcd_render(); // render to display all the writes from above
	delay(); // delay for 1000 ms or 1 second
}

void delay () {
 2c4:	84 e6       	ldi	r24, 0x64	; 100
 2c6:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	ef e1       	ldi	r30, 0x1F	; 31
 2ca:	fe e4       	ldi	r31, 0x4E	; 78
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <delay+0x8>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <delay+0xe>
 2d2:	00 00       	nop
 2d4:	01 97       	sbiw	r24, 0x01	; 1
	int i;					// declare i for counter
	for(i = 0; i < 100; i++) {	// loop 100 times
 2d6:	c1 f7       	brne	.-16     	; 0x2c8 <delay+0x4>
		_delay_ms(10);		//	delay 10 ms
	}						// total delay = 100*10ms = 1000ms
}
 2d8:	08 95       	ret

000002da <__vector_21>:

	return 0;
}

ISR(ADC_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	ADCvalue = ADC; // read all bits of ADC (10) and store into ADCvalue
 304:	80 91 78 00 	lds	r24, 0x0078
 308:	90 91 79 00 	lds	r25, 0x0079
 30c:	90 93 0c 03 	sts	0x030C, r25
 310:	80 93 0b 03 	sts	0x030B, r24
	temperature = ADCvalue; // copy value into new variable in case ADC overwrites it
 314:	80 91 0b 03 	lds	r24, 0x030B
 318:	90 91 0c 03 	lds	r25, 0x030C
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	80 93 06 03 	sts	0x0306, r24
 324:	90 93 07 03 	sts	0x0307, r25
 328:	a0 93 08 03 	sts	0x0308, r26
 32c:	b0 93 09 03 	sts	0x0309, r27
	// equation used to convert ADC value is:
	// (ADC register * 5 * 100) / 1024
	// which is the ADC multiplied by the reference voltage multiplied by 100
	// since the LM34 sensor gives its value in mV and then divide by 1024 since
	// a ten bit register will have a max value of 2^10 or 1024
	temperature = temperature*5;
 330:	80 91 06 03 	lds	r24, 0x0306
 334:	90 91 07 03 	lds	r25, 0x0307
 338:	a0 91 08 03 	lds	r26, 0x0308
 33c:	b0 91 09 03 	lds	r27, 0x0309
 340:	ac 01       	movw	r20, r24
 342:	bd 01       	movw	r22, r26
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	66 1f       	adc	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	66 1f       	adc	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	84 0f       	add	r24, r20
 356:	95 1f       	adc	r25, r21
 358:	a6 1f       	adc	r26, r22
 35a:	b7 1f       	adc	r27, r23
 35c:	80 93 06 03 	sts	0x0306, r24
 360:	90 93 07 03 	sts	0x0307, r25
 364:	a0 93 08 03 	sts	0x0308, r26
 368:	b0 93 09 03 	sts	0x0309, r27
	temperature = temperature*100;
 36c:	20 91 06 03 	lds	r18, 0x0306
 370:	30 91 07 03 	lds	r19, 0x0307
 374:	40 91 08 03 	lds	r20, 0x0308
 378:	50 91 09 03 	lds	r21, 0x0309
 37c:	a4 e6       	ldi	r26, 0x64	; 100
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__muluhisi3>
 384:	60 93 06 03 	sts	0x0306, r22
 388:	70 93 07 03 	sts	0x0307, r23
 38c:	80 93 08 03 	sts	0x0308, r24
 390:	90 93 09 03 	sts	0x0309, r25
	temperature = temperature/1024;
 394:	80 91 06 03 	lds	r24, 0x0306
 398:	90 91 07 03 	lds	r25, 0x0307
 39c:	a0 91 08 03 	lds	r26, 0x0308
 3a0:	b0 91 09 03 	lds	r27, 0x0309
 3a4:	07 2e       	mov	r0, r23
 3a6:	7a e0       	ldi	r23, 0x0A	; 10
 3a8:	b6 95       	lsr	r27
 3aa:	a7 95       	ror	r26
 3ac:	97 95       	ror	r25
 3ae:	87 95       	ror	r24
 3b0:	7a 95       	dec	r23
 3b2:	d1 f7       	brne	.-12     	; 0x3a8 <__vector_21+0xce>
 3b4:	70 2d       	mov	r23, r0
 3b6:	80 93 06 03 	sts	0x0306, r24
 3ba:	90 93 07 03 	sts	0x0307, r25
 3be:	a0 93 08 03 	sts	0x0308, r26
 3c2:	b0 93 09 03 	sts	0x0309, r27
	temp_out = temperature / 10; // dividing 2 digit temp (i.e. 75 or 80) will give tens digit
 3c6:	60 91 06 03 	lds	r22, 0x0306
 3ca:	70 91 07 03 	lds	r23, 0x0307
 3ce:	80 91 08 03 	lds	r24, 0x0308
 3d2:	90 91 09 03 	lds	r25, 0x0309
 3d6:	0f 2e       	mov	r0, r31
 3d8:	fa e0       	ldi	r31, 0x0A	; 10
 3da:	cf 2e       	mov	r12, r31
 3dc:	d1 2c       	mov	r13, r1
 3de:	e1 2c       	mov	r14, r1
 3e0:	f1 2c       	mov	r15, r1
 3e2:	f0 2d       	mov	r31, r0
 3e4:	a7 01       	movw	r20, r14
 3e6:	96 01       	movw	r18, r12
 3e8:	0e 94 c8 03 	call	0x790	; 0x790 <__udivmodsi4>
 3ec:	20 93 0a 03 	sts	0x030A, r18
	nokia_lcd_set_cursor(0, 0); // set cursor to beginning of LCD
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 9d 03 	call	0x73a	; 0x73a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Fahrenheit", 1); // print "Fahrenheit" with size scale of 1
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 8a 03 	call	0x714	; 0x714 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 10); // move to second line
 402:	6a e0       	ldi	r22, 0x0A	; 10
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 9d 03 	call	0x73a	; 0x73a <nokia_lcd_set_cursor>
	nokia_lcd_write_char(temp_out+'0', 4); // print tens digit with size scale of 4
 40a:	80 91 0a 03 	lds	r24, 0x030A
 40e:	64 e0       	ldi	r22, 0x04	; 4
 410:	80 5d       	subi	r24, 0xD0	; 208
 412:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <nokia_lcd_write_char>
	temp_out = temperature % 10; // % 10 will give the ones digit of a 2 digit temp
 416:	60 91 06 03 	lds	r22, 0x0306
 41a:	70 91 07 03 	lds	r23, 0x0307
 41e:	80 91 08 03 	lds	r24, 0x0308
 422:	90 91 09 03 	lds	r25, 0x0309
 426:	a7 01       	movw	r20, r14
 428:	96 01       	movw	r18, r12
 42a:	0e 94 c8 03 	call	0x790	; 0x790 <__udivmodsi4>
 42e:	60 93 0a 03 	sts	0x030A, r22
	nokia_lcd_write_char(temp_out+'0', 4); // print ones digit with size scale of 4
 432:	80 91 0a 03 	lds	r24, 0x030A
 436:	64 e0       	ldi	r22, 0x04	; 4
 438:	80 5d       	subi	r24, 0xD0	; 208
 43a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <nokia_lcd_write_char>
	nokia_lcd_render(); // render to display all the writes from above
 43e:	0e 94 a2 03 	call	0x744	; 0x744 <nokia_lcd_render>
	delay(); // delay for 1000 ms or 1 second
 442:	0e 94 62 01 	call	0x2c4	; 0x2c4 <delay>
}
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <write>:
 */
static void write(uint8_t bytes, uint8_t is_data)
{
	register uint8_t i;
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 470:	28 98       	cbi	0x05, 0	; 5

	/* We are sending data */
	if (is_data)
 472:	66 23       	and	r22, r22
 474:	11 f0       	breq	.+4      	; 0x47a <write+0xa>
		PORT_LCD |= (1 << LCD_DC);
 476:	2a 9a       	sbi	0x05, 2	; 5
 478:	15 c0       	rjmp	.+42     	; 0x4a4 <write+0x34>
	/* We are sending commands */
	else
		PORT_LCD &= ~(1 << LCD_DC);
 47a:	2a 98       	cbi	0x05, 2	; 5
 47c:	13 c0       	rjmp	.+38     	; 0x4a4 <write+0x34>

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
 47e:	ac 01       	movw	r20, r24
 480:	02 2e       	mov	r0, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <write+0x18>
 484:	55 95       	asr	r21
 486:	47 95       	ror	r20
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <write+0x14>
 48c:	40 ff       	sbrs	r20, 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <write+0x24>
			PORT_LCD |= (1 << LCD_DIN);
 490:	2b 9a       	sbi	0x05, 3	; 5
 492:	01 c0       	rjmp	.+2      	; 0x496 <write+0x26>
		else
			PORT_LCD &= ~(1 << LCD_DIN);
 494:	2b 98       	cbi	0x05, 3	; 5

		/* Blink clock */
		PORT_LCD |= (1 << LCD_CLK);
 496:	2d 9a       	sbi	0x05, 5	; 5
		PORT_LCD &= ~(1 << LCD_CLK);
 498:	2d 98       	cbi	0x05, 5	; 5
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	31 09       	sbc	r19, r1
 49e:	78 f7       	brcc	.-34     	; 0x47e <write+0xe>
	}

	/* Disable controller */
	PORT_LCD |= (1 << LCD_SCE);
 4a0:	28 9a       	sbi	0x05, 0	; 5
 4a2:	08 95       	ret
 * Sending data to LCD
 * @bytes: data
 * @is_data: transfer mode: 1 - data; 0 - command;
 */
static void write(uint8_t bytes, uint8_t is_data)
{
 4a4:	27 e0       	ldi	r18, 0x07	; 7
 4a6:	30 e0       	ldi	r19, 0x00	; 0
		PORT_LCD &= ~(1 << LCD_DC);

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	e9 cf       	rjmp	.-46     	; 0x47e <write+0xe>

000004ac <write_cmd>:
	PORT_LCD |= (1 << LCD_SCE);
}

static void write_cmd(uint8_t cmd)
{
	write(cmd, 0);
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	0e 94 38 02 	call	0x470	; 0x470 <write>
 4b2:	08 95       	ret

000004b4 <nokia_lcd_init>:
/*
 * Public functions
 */

void nokia_lcd_init(void)
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
	register unsigned i;
	/* Set pins as output */
	DDR_LCD |= (1 << LCD_SCE);
 4b8:	20 9a       	sbi	0x04, 0	; 4
	DDR_LCD |= (1 << LCD_RST);
 4ba:	21 9a       	sbi	0x04, 1	; 4
	DDR_LCD |= (1 << LCD_DC);
 4bc:	22 9a       	sbi	0x04, 2	; 4
	DDR_LCD |= (1 << LCD_DIN);
 4be:	23 9a       	sbi	0x04, 3	; 4
	DDR_LCD |= (1 << LCD_CLK);
 4c0:	25 9a       	sbi	0x04, 5	; 4

	/* Reset display */
	PORT_LCD |= (1 << LCD_RST);
 4c2:	29 9a       	sbi	0x05, 1	; 5
	PORT_LCD |= (1 << LCD_SCE);
 4c4:	28 9a       	sbi	0x05, 0	; 5
 4c6:	83 ec       	ldi	r24, 0xC3	; 195
 4c8:	99 e0       	ldi	r25, 0x09	; 9
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <nokia_lcd_init+0x16>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <nokia_lcd_init+0x1c>
 4d0:	00 00       	nop
	_delay_ms(10);
	PORT_LCD &= ~(1 << LCD_RST);
 4d2:	29 98       	cbi	0x05, 1	; 5
 4d4:	8b e5       	ldi	r24, 0x5B	; 91
 4d6:	94 e4       	ldi	r25, 0x44	; 68
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <nokia_lcd_init+0x24>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <nokia_lcd_init+0x2a>
 4de:	00 00       	nop
	_delay_ms(70);
	PORT_LCD |= (1 << LCD_RST);
 4e0:	29 9a       	sbi	0x05, 1	; 5

	/*
	 * Initialize display
	 */
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
 4e2:	28 98       	cbi	0x05, 0	; 5
	/* -LCD Extended Commands mode- */
	write_cmd(0x21);
 4e4:	81 e2       	ldi	r24, 0x21	; 33
 4e6:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	/* LCD bias mode 1:48 */
	write_cmd(0x13);
 4ea:	83 e1       	ldi	r24, 0x13	; 19
 4ec:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	/* Set temperature coefficient */
	write_cmd(0x06);
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	/* Default VOP (3.06 + 66 * 0.06 = 7V) */
	write_cmd(0xC2);
 4f6:	82 ec       	ldi	r24, 0xC2	; 194
 4f8:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	/* Standard Commands mode, powered down */
	write_cmd(0x20);
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	/* LCD in normal mode */
	write_cmd(0x09);
 502:	89 e0       	ldi	r24, 0x09	; 9
 504:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>

	/* Clear LCD RAM */
	write_cmd(0x80);
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	write_cmd(LCD_CONTRAST);
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
 514:	c8 ef       	ldi	r28, 0xF8	; 248
 516:	d1 e0       	ldi	r29, 0x01	; 1
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 38 02 	call	0x470	; 0x470 <write>
 520:	21 97       	sbiw	r28, 0x01	; 1
	write_cmd(0x09);

	/* Clear LCD RAM */
	write_cmd(0x80);
	write_cmd(LCD_CONTRAST);
	for (i = 0; i < 504; i++)
 522:	d1 f7       	brne	.-12     	; 0x518 <nokia_lcd_init+0x64>
		write_data(0x00);

	/* Activate LCD */
	write_cmd(0x08);
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	write_cmd(0x0C);
 52a:	8c e0       	ldi	r24, 0x0C	; 12
 52c:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <nokia_lcd_clear>:

void nokia_lcd_clear(void)
{
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	write_cmd(0x40);
 53c:	80 e4       	ldi	r24, 0x40	; 64
 53e:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
 542:	10 92 04 03 	sts	0x0304, r1
	nokia_lcd.cursor_y = 0;
 546:	10 92 05 03 	sts	0x0305, r1
 54a:	ec e0       	ldi	r30, 0x0C	; 12
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	84 e0       	ldi	r24, 0x04	; 4
 550:	93 e0       	ldi	r25, 0x03	; 3
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
		nokia_lcd.screen[i] = 0x00;
 552:	11 92       	st	Z+, r1
	write_cmd(0x40);
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
	nokia_lcd.cursor_y = 0;
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
 554:	e8 17       	cp	r30, r24
 556:	f9 07       	cpc	r31, r25
 558:	e1 f7       	brne	.-8      	; 0x552 <nokia_lcd_clear+0x1c>
		nokia_lcd.screen[i] = 0x00;
}
 55a:	08 95       	ret

0000055c <nokia_lcd_set_pixel>:
	write_cmd(on ? 0x20 : 0x24);
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 55c:	26 2f       	mov	r18, r22
 55e:	26 95       	lsr	r18
 560:	26 95       	lsr	r18
 562:	26 95       	lsr	r18
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	34 e5       	ldi	r19, 0x54	; 84
 568:	23 9f       	mul	r18, r19
 56a:	80 0d       	add	r24, r0
 56c:	91 1d       	adc	r25, r1
 56e:	11 24       	eor	r1, r1
	if (value)
 570:	44 23       	and	r20, r20
 572:	79 f0       	breq	.+30     	; 0x592 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 574:	fc 01       	movw	r30, r24
 576:	e4 5f       	subi	r30, 0xF4	; 244
 578:	fe 4f       	sbci	r31, 0xFE	; 254
 57a:	67 70       	andi	r22, 0x07	; 7
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <nokia_lcd_set_pixel+0x2a>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <nokia_lcd_set_pixel+0x26>
 58a:	90 81       	ld	r25, Z
 58c:	89 2b       	or	r24, r25
 58e:	80 83       	st	Z, r24
 590:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 592:	fc 01       	movw	r30, r24
 594:	e4 5f       	subi	r30, 0xF4	; 244
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	67 70       	andi	r22, 0x07	; 7
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <nokia_lcd_set_pixel+0x48>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <nokia_lcd_set_pixel+0x44>
 5a8:	80 95       	com	r24
 5aa:	90 81       	ld	r25, Z
 5ac:	89 23       	and	r24, r25
 5ae:	80 83       	st	Z, r24
 5b0:	08 95       	ret

000005b2 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 5b2:	4f 92       	push	r4
 5b4:	5f 92       	push	r5
 5b6:	6f 92       	push	r6
 5b8:	7f 92       	push	r7
 5ba:	8f 92       	push	r8
 5bc:	9f 92       	push	r9
 5be:	af 92       	push	r10
 5c0:	bf 92       	push	r11
 5c2:	cf 92       	push	r12
 5c4:	df 92       	push	r13
 5c6:	ef 92       	push	r14
 5c8:	ff 92       	push	r15
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 5d4:	26 2f       	mov	r18, r22
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	49 01       	movw	r8, r18
 5da:	88 0c       	add	r8, r8
 5dc:	99 1c       	adc	r9, r9
 5de:	88 0c       	add	r8, r8
 5e0:	99 1c       	adc	r9, r9
 5e2:	82 0e       	add	r8, r18
 5e4:	93 1e       	adc	r9, r19
 5e6:	18 14       	cp	r1, r8
 5e8:	19 04       	cpc	r1, r9
 5ea:	0c f0       	brlt	.+2      	; 0x5ee <nokia_lcd_write_char+0x3c>
 5ec:	5e c0       	rjmp	.+188    	; 0x6aa <nokia_lcd_write_char+0xf8>
		for (y = 0; y < 7*scale; y++)
 5ee:	89 01       	movw	r16, r18
 5f0:	00 0f       	add	r16, r16
 5f2:	11 1f       	adc	r17, r17
 5f4:	00 0f       	add	r16, r16
 5f6:	11 1f       	adc	r17, r17
 5f8:	00 0f       	add	r16, r16
 5fa:	11 1f       	adc	r17, r17
 5fc:	02 1b       	sub	r16, r18
 5fe:	13 0b       	sbc	r17, r19
 600:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 602:	a8 2e       	mov	r10, r24
 604:	b1 2c       	mov	r11, r1
 606:	c5 01       	movw	r24, r10
 608:	80 97       	sbiw	r24, 0x20	; 32
 60a:	5c 01       	movw	r10, r24
 60c:	aa 0c       	add	r10, r10
 60e:	bb 1c       	adc	r11, r11
 610:	aa 0c       	add	r10, r10
 612:	bb 1c       	adc	r11, r11
 614:	a8 0e       	add	r10, r24
 616:	b9 1e       	adc	r11, r25
 618:	41 2c       	mov	r4, r1
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 61a:	0f 2e       	mov	r0, r31
 61c:	f5 e0       	ldi	r31, 0x05	; 5
 61e:	cf 2e       	mov	r12, r31
 620:	f3 e0       	ldi	r31, 0x03	; 3
 622:	df 2e       	mov	r13, r31
 624:	f0 2d       	mov	r31, r0
 626:	0f 2e       	mov	r0, r31
 628:	f4 e0       	ldi	r31, 0x04	; 4
 62a:	ef 2e       	mov	r14, r31
 62c:	f3 e0       	ldi	r31, 0x03	; 3
 62e:	ff 2e       	mov	r15, r31
 630:	f0 2d       	mov	r31, r0
 632:	2d c0       	rjmp	.+90     	; 0x68e <nokia_lcd_write_char+0xdc>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 634:	fe 01       	movw	r30, r28
 636:	24 91       	lpm	r18, Z
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	87 2d       	mov	r24, r7
 63c:	65 2d       	mov	r22, r5
 63e:	0e 94 bc 03 	call	0x778	; 0x778 <__udivmodqi4>
 642:	02 c0       	rjmp	.+4      	; 0x648 <nokia_lcd_write_char+0x96>
 644:	35 95       	asr	r19
 646:	27 95       	ror	r18
 648:	8a 95       	dec	r24
 64a:	e2 f7       	brpl	.-8      	; 0x644 <nokia_lcd_write_char+0x92>
 64c:	20 ff       	sbrs	r18, 0
 64e:	0a c0       	rjmp	.+20     	; 0x664 <nokia_lcd_write_char+0xb2>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 650:	f6 01       	movw	r30, r12
 652:	60 81       	ld	r22, Z
 654:	67 0d       	add	r22, r7
 656:	f7 01       	movw	r30, r14
 658:	80 81       	ld	r24, Z
 65a:	41 e0       	ldi	r20, 0x01	; 1
 65c:	86 0d       	add	r24, r6
 65e:	0e 94 ae 02 	call	0x55c	; 0x55c <nokia_lcd_set_pixel>
 662:	09 c0       	rjmp	.+18     	; 0x676 <nokia_lcd_write_char+0xc4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 664:	f6 01       	movw	r30, r12
 666:	60 81       	ld	r22, Z
 668:	67 0d       	add	r22, r7
 66a:	f7 01       	movw	r30, r14
 66c:	80 81       	ld	r24, Z
 66e:	44 2d       	mov	r20, r4
 670:	86 0d       	add	r24, r6
 672:	0e 94 ae 02 	call	0x55c	; 0x55c <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 676:	73 94       	inc	r7
 678:	87 2d       	mov	r24, r7
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	80 17       	cp	r24, r16
 67e:	91 07       	cpc	r25, r17
 680:	cc f2       	brlt	.-78     	; 0x634 <nokia_lcd_write_char+0x82>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 682:	63 94       	inc	r6
 684:	86 2d       	mov	r24, r6
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	88 15       	cp	r24, r8
 68a:	99 05       	cpc	r25, r9
 68c:	74 f4       	brge	.+28     	; 0x6aa <nokia_lcd_write_char+0xf8>
		for (y = 0; y < 7*scale; y++)
 68e:	10 16       	cp	r1, r16
 690:	11 06       	cpc	r1, r17
 692:	bc f7       	brge	.-18     	; 0x682 <nokia_lcd_write_char+0xd0>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 694:	86 2d       	mov	r24, r6
 696:	65 2d       	mov	r22, r5
 698:	0e 94 bc 03 	call	0x778	; 0x778 <__udivmodqi4>
 69c:	e5 01       	movw	r28, r10
 69e:	c8 0f       	add	r28, r24
 6a0:	d1 1d       	adc	r29, r1
 6a2:	c8 59       	subi	r28, 0x98	; 152
 6a4:	df 4f       	sbci	r29, 0xFF	; 255
 6a6:	74 2c       	mov	r7, r4
 6a8:	c5 cf       	rjmp	.-118    	; 0x634 <nokia_lcd_write_char+0x82>
 6aa:	80 91 04 03 	lds	r24, 0x0304
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	98 0f       	add	r25, r24
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 6b2:	85 2d       	mov	r24, r5
 6b4:	88 0f       	add	r24, r24
 6b6:	88 0f       	add	r24, r24
 6b8:	85 0d       	add	r24, r5
 6ba:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 6bc:	84 35       	cpi	r24, 0x54	; 84
 6be:	18 f4       	brcc	.+6      	; 0x6c6 <nokia_lcd_write_char+0x114>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 6c0:	80 93 04 03 	sts	0x0304, r24
 6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <nokia_lcd_write_char+0x130>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 6c6:	10 92 04 03 	sts	0x0304, r1
		nokia_lcd.cursor_y += 7*scale + 1;
 6ca:	e5 e0       	ldi	r30, 0x05	; 5
 6cc:	f3 e0       	ldi	r31, 0x03	; 3
 6ce:	80 81       	ld	r24, Z
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	98 0f       	add	r25, r24
 6d4:	85 2d       	mov	r24, r5
 6d6:	88 0f       	add	r24, r24
 6d8:	88 0f       	add	r24, r24
 6da:	88 0f       	add	r24, r24
 6dc:	85 19       	sub	r24, r5
 6de:	89 0f       	add	r24, r25
 6e0:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 6e2:	80 91 05 03 	lds	r24, 0x0305
 6e6:	80 33       	cpi	r24, 0x30	; 48
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <nokia_lcd_write_char+0x140>
		nokia_lcd.cursor_x = 0;
 6ea:	10 92 04 03 	sts	0x0304, r1
		nokia_lcd.cursor_y = 0;
 6ee:	10 92 05 03 	sts	0x0305, r1
	}
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	df 90       	pop	r13
 700:	cf 90       	pop	r12
 702:	bf 90       	pop	r11
 704:	af 90       	pop	r10
 706:	9f 90       	pop	r9
 708:	8f 90       	pop	r8
 70a:	7f 90       	pop	r7
 70c:	6f 90       	pop	r6
 70e:	5f 90       	pop	r5
 710:	4f 90       	pop	r4
 712:	08 95       	ret

00000714 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	ec 01       	movw	r28, r24
	while(*str)
 71c:	88 81       	ld	r24, Y
 71e:	88 23       	and	r24, r24
 720:	41 f0       	breq	.+16     	; 0x732 <nokia_lcd_write_string+0x1e>
 722:	16 2f       	mov	r17, r22
 724:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 726:	61 2f       	mov	r22, r17
 728:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 72c:	89 91       	ld	r24, Y+
 72e:	81 11       	cpse	r24, r1
 730:	fa cf       	rjmp	.-12     	; 0x726 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	08 95       	ret

0000073a <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 73a:	80 93 04 03 	sts	0x0304, r24
	nokia_lcd.cursor_y = y;
 73e:	60 93 05 03 	sts	0x0305, r22
 742:	08 95       	ret

00000744 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
	write_cmd(0x40);
 752:	80 e4       	ldi	r24, 0x40	; 64
 754:	0e 94 56 02 	call	0x4ac	; 0x4ac <write_cmd>
 758:	cc e0       	ldi	r28, 0x0C	; 12
 75a:	d1 e0       	ldi	r29, 0x01	; 1
 75c:	04 e0       	ldi	r16, 0x04	; 4
 75e:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	89 91       	ld	r24, Y+
 764:	0e 94 38 02 	call	0x470	; 0x470 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 768:	c0 17       	cp	r28, r16
 76a:	d1 07       	cpc	r29, r17
 76c:	c9 f7       	brne	.-14     	; 0x760 <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	08 95       	ret

00000778 <__udivmodqi4>:
 778:	99 1b       	sub	r25, r25
 77a:	79 e0       	ldi	r23, 0x09	; 9
 77c:	04 c0       	rjmp	.+8      	; 0x786 <__udivmodqi4_ep>

0000077e <__udivmodqi4_loop>:
 77e:	99 1f       	adc	r25, r25
 780:	96 17       	cp	r25, r22
 782:	08 f0       	brcs	.+2      	; 0x786 <__udivmodqi4_ep>
 784:	96 1b       	sub	r25, r22

00000786 <__udivmodqi4_ep>:
 786:	88 1f       	adc	r24, r24
 788:	7a 95       	dec	r23
 78a:	c9 f7       	brne	.-14     	; 0x77e <__udivmodqi4_loop>
 78c:	80 95       	com	r24
 78e:	08 95       	ret

00000790 <__udivmodsi4>:
 790:	a1 e2       	ldi	r26, 0x21	; 33
 792:	1a 2e       	mov	r1, r26
 794:	aa 1b       	sub	r26, r26
 796:	bb 1b       	sub	r27, r27
 798:	fd 01       	movw	r30, r26
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <__udivmodsi4_ep>

0000079c <__udivmodsi4_loop>:
 79c:	aa 1f       	adc	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	ee 1f       	adc	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	a2 17       	cp	r26, r18
 7a6:	b3 07       	cpc	r27, r19
 7a8:	e4 07       	cpc	r30, r20
 7aa:	f5 07       	cpc	r31, r21
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__udivmodsi4_ep>
 7ae:	a2 1b       	sub	r26, r18
 7b0:	b3 0b       	sbc	r27, r19
 7b2:	e4 0b       	sbc	r30, r20
 7b4:	f5 0b       	sbc	r31, r21

000007b6 <__udivmodsi4_ep>:
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a 94       	dec	r1
 7c0:	69 f7       	brne	.-38     	; 0x79c <__udivmodsi4_loop>
 7c2:	60 95       	com	r22
 7c4:	70 95       	com	r23
 7c6:	80 95       	com	r24
 7c8:	90 95       	com	r25
 7ca:	9b 01       	movw	r18, r22
 7cc:	ac 01       	movw	r20, r24
 7ce:	bd 01       	movw	r22, r26
 7d0:	cf 01       	movw	r24, r30
 7d2:	08 95       	ret

000007d4 <__muluhisi3>:
 7d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__umulhisi3>
 7d8:	a5 9f       	mul	r26, r21
 7da:	90 0d       	add	r25, r0
 7dc:	b4 9f       	mul	r27, r20
 7de:	90 0d       	add	r25, r0
 7e0:	a4 9f       	mul	r26, r20
 7e2:	80 0d       	add	r24, r0
 7e4:	91 1d       	adc	r25, r1
 7e6:	11 24       	eor	r1, r1
 7e8:	08 95       	ret

000007ea <__umulhisi3>:
 7ea:	a2 9f       	mul	r26, r18
 7ec:	b0 01       	movw	r22, r0
 7ee:	b3 9f       	mul	r27, r19
 7f0:	c0 01       	movw	r24, r0
 7f2:	a3 9f       	mul	r26, r19
 7f4:	70 0d       	add	r23, r0
 7f6:	81 1d       	adc	r24, r1
 7f8:	11 24       	eor	r1, r1
 7fa:	91 1d       	adc	r25, r1
 7fc:	b2 9f       	mul	r27, r18
 7fe:	70 0d       	add	r23, r0
 800:	81 1d       	adc	r24, r1
 802:	11 24       	eor	r1, r1
 804:	91 1d       	adc	r25, r1
 806:	08 95       	ret

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
